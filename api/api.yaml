openapi: 3.0.1
info:
  title: Ampersand public API
  version: 1.0.0
servers:
  - url: https://api.withampersand.com/v1
paths:
  /oauth-connect:
    post:
      operationId: oauthConnect
      summary: Get URL for OAuth flow
      description: Generate a URL for the browser to render to kick off OAuth flow.
      tags: ["OAuth"]
      security: []  # This overrides the global security
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - projectId
                - groupRef
                - consumerRef
                - provider
              properties:
                providerWorkspaceRef:
                  type: string
                  description: The identifier for the provider workspace
                  example: salesforce-instance-domain
                projectId:
                  type: string
                  description: The Ampersand project ID.
                groupRef:
                  type: string
                  description: The ID that your app uses to identify the group of users for this Connection, this can be an Org ID, workspace ID, etc.
                groupName:
                  type: string
                  description: The display name for the group. Defaults to groupRef if not provided.
                consumerRef:
                  type: string
                  description: The ID that your app uses to identify the user whose SaaS credential will be used for this OAuth flow.
                consumerName:
                  type: string
                  description: The display name for the consumer. Defaults to consumerRef if not provided.
                providerAppId:
                  type: string
                  description:
                    ID of the provider app (e.g. Salesforce connected app), returned from a CreateProviderApp call.
                    If omitted, the default provider app that was set up on the Ampersand Dashboard is assumed.
                provider:
                  type: string
                  description: The provider that this app connects to.
                  example: salesforce
        required: true
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: string
                description: URL to render
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: connectOAuthParams
  /projects:
    get:
      summary: List all projects that the API key or user credential has access to
      operationId: listProjects
      tags: ["Project"]
      responses:
        200:
          description: List of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
    post:
      summary: Create a new project
      operationId: createProject
      tags: ["Project"]
      requestBody:
        content:
          application/json:
            schema:
              # TODO(ENG-1029): once all projects have been backfilled with org ID, add orgId to required list
              required:
                - appName
                - name
                - orgId
              type: object
              properties:
                appName:
                  type: string
                  description: The app name.
                  example: MailMonkey
                name:
                  type: string
                  description: The project name. Must be alphanumerics and hyphens only. Project names will be save in lowercase.
                  example: mailmonkey-staging
                orgId:
                  type: string
                  description: The organization ID.
        required: true
      responses:
        201:
          description: The newly created project
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: project
  /projects/{projectIdOrName}:
    get:
      summary: Get a project
      operationId: getProject
      tags: ["Project"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Project
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        404:
          description: Project not found
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
    delete:
      summary: Delete a project
      operationId: deleteProject
      tags: ["Project"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Deleted
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
    patch:
      summary: Update a project
      operationId: updateProject
      tags: ["Project"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - project
                - updateMask
              type: object
              properties:
                updateMask:
                  type: array
                  example:
                    - appName
                  items:
                    type: string
                    description: fields to update.
                project:
                  type: object
                  properties:
                    appName:
                      type: string
                      description: The app name.
                      example: MailMonkey
                    name:
                      type: string
                      description: The project name.
                      example: mailmonkey-staging
                  description: The project fields to update. (Only include the
                    fields you'd like to update.)
        required: true
      responses:
        200:
          description: The updated project
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: projectUpdate
  /projects/{projectIdOrName}/provider-apps:
    get:
      summary: List provider apps
      operationId: listProviderApps
      tags: ["Provider App"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: List of provider apps
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProviderApp"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
    post:
      summary: Create a new provider app
      operationId: createProviderApp
      tags: ["Provider App"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - clientId
                - clientSecret
                - provider
              type: object
              properties:
                externalRef:
                  type: string
                  description: The ID used by the provider to identify the app (optional).
                  example: external-id-123
                provider:
                  type: string
                  description: The SaaS provider that this app connects to.
                  example: salesforce
                clientId:
                  type: string
                  description: The OAuth client ID for this app.
                  example: client-id-123
                clientSecret:
                  type: string
                  description: The OAuth client secret for this app.
                  example: client-secret-123
                scopes:
                  type: array
                  description: The OAuth scopes for this app.
                  items:
                    type: string
                    example:
                      - read
                      - write
        required: true
      responses:
        200:
          description: The newly created provider app
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProviderApp"
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: providerApp
  /projects/{projectIdOrName}/provider-apps/{providerAppId}:
    delete:
      summary: Delete a provider app
      operationId: deleteProviderApp
      tags: ["Provider App"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
        - name: providerAppId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Deleted
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
    patch:
      summary: Update a provider app
      operationId: updateProviderApp
      tags: ["Provider App"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
        - name: providerAppId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - providerApp
                - updateMask
              type: object
              properties:
                updateMask:
                  type: array
                  example:
                    - externalRef
                    - provider
                    - clientId
                    - clientSecret
                  items:
                    type: string
                    description: fields to update.
                providerApp:
                  type: object
                  properties:
                    externalRef:
                      type: string
                      description:
                        The ID used by the provider to identify the app
                        (optional).
                      example: external-id-123
                    provider:
                      type: string
                      description: The SaaS provider that this app connects to.
                      example: salesforce
                    clientId:
                      type: string
                      description: The OAuth client ID for this app.
                      example: client-id-123
                    clientSecret:
                      type: string
                      description: The OAuth client secret for this app.
                      example: client-secret-123
                    scopes:
                      type: array
                      description: The OAuth scopes for this app.
                      items:
                        type: string
                        example:
                          - read
                          - write
                  description:
                    The provider app fields to update. (Only include the
                    fields you'd like to update.)
        required: true
      responses:
        200:
          description: The updated provider app
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProviderApp"
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: providerAppUpdate
  /projects/{projectIdOrName}/integrations:
    get:
      summary: List integrations
      operationId: listIntegrations
      tags: ["Integration"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: List of integrations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Integration"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
    post:
      summary: Create a new integration
      operationId: createIntegration
      tags: ["Integration"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - name
                - provider
                - latestRevision
              type: object
              properties:
                name:
                  type: string
                  description: The integration name.
                provider:
                  type: string
                  description: The provider name (e.g. "salesforce", "hubspot")
                latestRevision:
                  type: object
                  properties:
                    sourceZipUrl:
                      type: string
                      description:
                        URL of where a zip of the source files can be downloaded
                        (e.g. Google Cloud Storage URL).
                    sourceYaml:
                      type: string
                      description:
                        A YAML string that defines the integration.
                  description:
                    If included, creating this integration will also create
                    a new revision of the integration. For LatestRevision, one of sourceZipUrl or
                    sourceYaml is required.
        required: true
      responses:
        201:
          description: Created
          content: {}
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: integration
  /projects/{projectIdOrName}/integrations/{integrationId}:
    delete:
      summary: Delete an integration
      operationId: deleteIntegration
      tags: ["Integration"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
        - name: integrationId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Deleted
        404:
          description: Integration not found
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /projects/{projectIdOrName}/integrations:batch:
    put:
      summary: Batch upsert a group of integrations
      operationId: batchUpsertIntegrations
      tags: ["Integration"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sourceZipUrl:
                  type: string
                  description:
                    URL of where a zip of the source files can be downloaded
                    (e.g. Google Cloud Storage URL).
                sourceYaml:
                  type: string
                  description:
                    A YAML string that defines the integrations.
              description:
                The source of the integrations to upsert. One of sourceZipUrl or sourceYaml is required.
      responses:
        200:
          description: Upserted integrations.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Integration"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /projects/{projectIdOrName}/integrations/{integrationId}/revisions:
    post:
      summary: Create a new revision
      operationId: createRevision
      tags: ["Revision"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
        - name: integrationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sourceZipUrl:
                  type: string
                  description:
                    URL of where a zip of the source files can be downloaded
                    (e.g. Google Cloud Storage URL).
                sourceYaml:
                  type: string
                  description:
                    The source YAML file that defines the revision.
              description:
                The source of the revision to create. One of sourceZipUrl or sourceYaml is required.
      responses:
        201:
          description: Created
          content: {}
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: revision
  /projects/{projectIdOrName}/integrations/{integrationId}/revisions/{revisionId}:hydrate:
    get:
      summary: Hydrate a revision
      description: Hydrate a revision with information from the consumer's SaaS instance.
      operationId: getHydratedRevision
      tags: ["Revision"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
        - name: integrationId
          in: path
          required: true
          schema:
            type: string
        - name: revisionId
          in: path
          required: true
          schema:
            type: string
        - name: connectionId
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: Hydrated revision
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HydratedRevision"
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /projects/{projectIdOrName}/integrations/{integrationId}/installations:
    get:
      summary: List installations
      operationId: listInstallations
      tags: ["Installation"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
        - name: integrationId
          in: path
          required: true
          schema:
            type: string
        - name: groupRef
          in: query
          schema:
            type: string
      responses:
        200:
          description: List of installations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Installation"
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
    post:
      summary: Create a new installation
      operationId: createInstallation
      tags: ["Installation"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
        - name: integrationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - config
                - groupRef
              type: object
              properties:
                groupRef:
                  type: string
                  description: The ID of the user group that has access to this installation.
                connectionId:
                  type: string
                  description:
                    The ID of the SaaS connection tied to this installation.
                    If omitted the default connection for this group will be used.
                config:
                  required:
                    - content
                  type: object
                  properties:
                    revisionId:
                      type: string
                      description:
                        The ID of the revision that this config is based
                        on. If omitted, the latest revision is assumed.
                    createdBy:
                      type: string
                      description:
                        The person who created the config, in the format
                        of "consumer:{consumer-id}" or "builder:{builder-id}".
                      default: "api:create-installation"
                    content:
                      $ref: "../config/config.yaml#/components/schemas/ConfigContent"
                  description: The config of the installation.
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Installation"
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: installation
  /projects/{projectIdOrName}/integrations/{integrationId}/installations:import:
    post:
      summary: Import an existing installation
      operationId: importInstallation
      tags: ["Installation"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
        - name: integrationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - provider
                - config
                - connection
              type: object
              properties:
                provider:
                  type: string
                  description: The SaaS provider that this installation connects to.
                  example: salesforce
                connection:
                  $ref: "#/components/schemas/ImportConnectionRequest"
                config:
                  required:
                    - content
                  type: object
                  properties:
                    revisionId:
                      type: string
                      description:
                        The ID of the integration revision that this config is based on.
                        If omitted, the latest revision is assumed.
                    content:
                      $ref: "../config/config.yaml#/components/schemas/ConfigContent"
                  description: The config of the installation.
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Installation"
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: installation
  /projects/{projectIdOrName}/integrations/{integrationId}/installations/{installationId}:
    get:
      summary: Get an installation
      operationId: getInstallation
      tags: ["Installation"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
        - name: integrationId
          in: path
          required: true
          schema:
            type: string
        - name: installationId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: The installation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Installation"
        400:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
    delete:
      summary: Delete an installation
      operationId: deleteInstallation
      tags: ["Installation"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
        - name: integrationId
          in: path
          required: true
          schema:
            type: string
        - name: installationId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Deleted
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
    patch:
      summary: Update an installation
      operationId: updateInstallation
      tags: ["Installation"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
        - name: integrationId
          in: path
          required: true
          schema:
            type: string
        - name: installationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - installation
                - updateMask
              type: object
              properties:
                updateMask:
                  type: array
                  example:
                    - connectionId
                    - config.content.write.objects.account
                  items:
                    type: string
                    description: fields to update.
                installation:
                  type: object
                  properties:
                    connectionId:
                      type: string
                      description: The ID of the SaaS connection tied to this installation.
                      example: connection-123
                    config:
                      type: object
                      properties:
                        revisionId:
                          type: string
                          description:
                            The ID of the revision that this config is
                            based on.
                        createdBy:
                          type: string
                          description:
                            The person who created the config, in the format
                            of "consumer:{consumer-id}" or "builder:{builder-id}".
                        content:
                          $ref: "../config/config.yaml#/components/schemas/UpdateInstallationConfigContent"
                          description: The content of the config.
                      description: The config of the installation.
                  description:
                    The installation fields to update. (Only include the
                    fields you'd like to update.)
        required: true
      responses:
        200:
          description: The updated installation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Installation"
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: installationUpdate
  /projects/{projectIdOrName}/integrations/{integrationId}/installations/{installationId}/operations:
    get:
      summary: List operations
      operationId: listOperations
      tags: ["Operation"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
        - name: integrationId
          in: path
          required: true
          schema:
            type: string
        - name: installationId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: List of operations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Operation"
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /projects/{projectIdOrName}/operations/{operationId}:
    get:
      summary: Get an operation
      operationId: getOperation
      tags: ["Operation"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
        - name: operationId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"  
  /projects/{projectIdOrName}/operations/{operationId}/logs:
    get:
      summary: List logs for an operation
      operationId: listOperationLogs
      tags: ["Operation"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
        - name: operationId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: List of logs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Log"
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /providers:
    get:
      summary: List providers
      operationId: listProviders
      tags: ["Provider"]
      responses:
        200:
          description: List of providers & their information
          content:
            application/json:
              schema:
                $ref: "../catalog/catalog.yaml#/components/schemas/CatalogType"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /providers/{provider}:
    get:
      summary: Get provider
      operationId: getProvider
      tags: ["Provider"]
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: ProviderInfo
          content:
            application/json:
              schema:
                $ref: "../catalog/catalog.yaml#/components/schemas/ProviderInfo"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /projects/{projectIdOrName}/api-keys:
    get:
      summary: List API keys
      operationId: listApiKeys
      tags: ["API Key"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
        - name: active
          in: query
          description: Whether to include only active API keys. If false, all API keys are included.
          schema:
            type: boolean
      responses:
        200:
          description: List of API keys
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiKey"
        404:
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
    post:
      summary: Create a new API key
      operationId: createApiKey
      tags: ["API Key"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiKeyRequest"
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKey"
        404:
          description: Project not found
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: apiKey
  /projects/{projectIdOrName}/api-keys/{apiKey}:
    get:
      summary: Get an API key
      operationId: getApiKey
      tags: ["API Key"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
        - name: apiKey
          in: path
          required: true
          schema:
            type: string
      responses:
        404:
          description: API key not found
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        200:
          description: API key
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKey"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
    delete:
      summary: Delete an API key
      operationId: deleteApiKey
      tags: ["API Key"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
        - name: apiKey
          in: path
          required: true
          schema:
            type: string
      responses:
        404:
          description: Not found
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        204:
          description: Deleted
    patch:
      summary: Update an API key
      operationId: updateApiKey
      tags: ["API Key"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
        - name: apiKey
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchApiKeyRequest"
        required: true
      responses:
        200:
          description: API key updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKey"
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        404:
          description: Not found
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /projects/{projectIdOrName}/connections:
    get:
      summary: List connections
      operationId: listConnections
      tags: ["Connection"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
        - name: provider
          in: query
          description: The provider name (e.g. "salesforce", "hubspot")
          schema:
            type: string
        - name: groupRef
          in: query
          description: The ID of the user group that has access to this installation.
          schema:
            type: string
        - name: consumerRef
          in: query
          description: The consumer reference.
          schema:
            type: string
      responses:
        200:
          description: List of project connections.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Connection"
        404:
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /projects/{projectIdOrName}/connections:generate:
    post:
      summary: Generate a new connection (only valid for providers with auth types which are not OAuth2 Authorization Code)
      operationId: generateConnection
      tags: ["Connection"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - groupRef
                - consumerRef
                - provider
              properties:
                providerWorkspaceRef:
                  type: string
                  description: The ID of the provider workspace that this connection belongs to.
                groupName:
                  type: string
                  description: The name of the user group that has access to this installation.
                groupRef:
                  type: string
                  description: The ID of the user group that has access to this installation.
                consumerName:
                  type: string
                  description: The name of the consumer that has access to this installation.
                consumerRef:
                  type: string
                  description: The consumer reference.
                provider:
                  type: string
                  description: The provider name (e.g. "salesforce", "hubspot")
                apiKey:
                  type: string
                  description: The API key to use for the connection.
                basicAuth:
                  type: object
                  required:
                    - username
                    - password
                  properties:
                    username:
                      type: string
                      description: The username to use for the connection.
                    password:
                      type: string
                      description: The password to use for the connection.
                oauth2ClientCredentials:
                  type: object
                  required:
                    - clientId
                    - clientSecret
                  properties:
                    clientId:
                      type: string
                      description: The client ID to use for the connection.
                    clientSecret:
                      type: string
                      description: The client secret to use for the connection.
                    scopes:
                      type: array
                      items:
                        type: string
                      description: The scopes to use for the connection (optional).
                oauth2Password:
                  type: object
                  required:
                    - username
                    - password
                    - clientId
                    - clientSecret
                  properties:
                    username:
                      type: string
                      description: The username to use for the connection.
                    password:
                      type: string
                      description: The password to use for the connection.
                    clientId:
                      type: string
                      description: The client ID to use for the connection.
                    clientSecret:
                      type: string
                      description: The client secret to use for the connection.
                    scopes:
                      type: array
                      items:
                        type: string
                      description: The scopes to use for the connection (optional).
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connection"
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: generateConnectionParams
  /projects/{projectIdOrName}/connections/{connectionId}:
    get:
      summary: Get a connection
      operationId: getConnection
      tags: ["Connection"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
        - name: connectionId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Connection
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connection"
        404:
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /projects/{projectIdOrName}/groups:
    post:
      summary: Create a new group
      operationId: createGroup
      tags: ["Group"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - groupName
                - groupRef
              type: object
              properties:
                groupRef:
                  type: string
                  description: The ID of the user group that has access to this installation.
                  example: group-123
                groupName:
                  type: string
                  description:
                    The name of the user group that has access to this
                    installation.
                  example: Super Customers
        required: true
      responses:
        201:
          description: Created
          content: {}
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: group
  /projects/{projectIdOrName}/consumers:
    post:
      summary: Create a new consumer
      operationId: createConsumer
      tags: ["Consumer"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - consumerName
                - consumerRef
              type: object
              properties:
                consumerRef:
                  type: string
                  description: The consumer reference.
                  example: consumer-123
                consumerName:
                  type: string
                  description: The name of the consumer that has access to this installation.
                  example: John doe
        required: true
      responses:
        201:
          description: Created
          content: {}
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: consumer
  /projects/{projectIdOrName}/destinations:
    post:
      summary: Create a new destination
      operationId: createDestination
      tags: ["Destination"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - type
                - metadata
              properties:
                name:
                  type: string
                  description: Name for the new destination.
                    Must be unique within the project and can only contain letters, numbers and dashes.
                  example: leadConvertedWebhook
                type:
                  type: string
                  description: The type of the destination
                  example: webhook
                metadata:
                  type: object
                  properties:
                    url:
                      type: string
                      description: Webhook URL, must start with "https://".
                      example: https://webhooks.mailmonkey.com/salesforce-lead-converted
                    headers:
                      $ref: "#/components/schemas/WebhookHeaders"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Destination"
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: destination
    get:
      summary: List destinations
      operationId: listDestinations
      tags: ["Destination"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: List of destinations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Destination"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /projects/{projectIdOrName}/destinations/{destinationName}:
    get:
      summary: Get a destination
      operationId: getDestination
      tags: ["Destination"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
        - name: destinationName
          in: path
          required: true
          schema:
            type: string
      responses:
        404:
          description: Destination not found
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Destination"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /projects/{projectIdOrName}/destinations/{destinationId}:
    patch:
      summary: Update a destination
      operationId: updateDestination
      tags: ["Destination"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
        - name: destinationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - updateMask
                - destination
              properties:
                updateMask:
                  type: array
                  example:
                    - name
                    - metadata.url
                    - metadata.headers
                  items:
                    type: string
                    description: fields to update.
                destination:
                  type: object
                  properties:
                    name:
                      type: string
                      description: User-friendly name for the destination
                      example: leadConvertedWebhook
                    metadata:
                      type: object
                      properties:
                        url:
                          type: string
                          description: Webhook URL
                          example: https://webhooks.mailmonkey.com/salesforce-lead-converted
                        headers:
                          $ref: "#/components/schemas/WebhookHeaders"
      responses:
        404:
          description: Destination not found
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        200:
          description: Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Destination"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: destinationUpdate
    delete:
      summary: Delete a destination
      operationId: deleteDestination
      tags: ["Destination"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
        - name: destinationId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Deleted
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /generate-upload-url:
    get:
      summary: Generate a signed URL to upload a zip file to.
      operationId: generateUploadUrl
      tags: ["Upload URL"]
      responses:
        200:
          description: Signed URL
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignedUrl"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /orgs:
    post:
      summary: Create a new organization
      operationId: createOrg
      tags: ["Org"]
      requestBody:
        content:
          application/json:
            schema:
              required:
                - label
              type: object
              properties:
                label:
                  type: string
                  description: The organization label.
                  example: org-123
        required: true
      responses:
        201:
          description: The newly created org
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Org"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: org
  /orgs/{orgId}:
    get:
      summary: Get an organization
      operationId: getOrg
      tags: ["Org"]
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Organization
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Org"
        404:
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
    patch:
      summary: Update an organization
      operationId: updateOrg
      tags: ["Org"]
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - updateMask
                - org
              properties:
                updateMask:
                  type: array
                  example:
                    - label
                  items:
                    type: string
                    description: fields to update.
                org:
                  type: object
                  properties:
                    label:
                      type: string
                      description: The organization label.
                      example: org-123
      responses:
        200:
          description: Updated org
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Org"
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
        x-codegen-request-body-name: orgUpdate
  /orgs/{orgId}/builders:
    get:
      summary: List builders for an organization
      operationId: listOrgBuilders
      tags: ["Org"]
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: List of builders that are a part of the org
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Builder"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /orgs/{orgId}/invites:
    post:
      summary: Invite a user to an organization
      operationId: createOrgInvite
      tags: ["Org"]
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - email
              type: object
              properties:
                email:
                  type: string
                  description: The email address of the user to invite.
                  example: alice@company.com
      responses:
        201:
          description: The newly created invite
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invite"
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
        x-codegen-request-body-name: invite
    get:
      summary: List invites for an organization
      operationId: listOrgInvites
      tags: ["Org"]
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: List of invites
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Invite"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /orgs/{orgId}/invites/{inviteId}:
    get:
      summary: Get an invite
      operationId: getOrgInvite
      tags: ["Org"]
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
        - name: inviteId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Invite
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invite"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
    delete:
      summary: Revoke an invite
      operationId: deleteOrgInvite
      tags: ["Org"]
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
        - name: inviteId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Deleted
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /my-info:
    get:
      summary: Get information about the current user
      operationId: getMyInfo
      tags: ["User"]
      security: []  # This overrides the global security
      responses:
        200:
          description: Information about the current user and their organizations and projects
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BuilderInfo"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /invites:accept:
    post:
      summary: Accept an invite
      operationId: acceptInvite
      tags: ["User"]
      security: []  # This overrides the global security
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - invitedEmail
              properties:
                invitedEmail:
                  type: string
                  description: The email address that the invite was sent to
        required: true
      responses:
        200:
          description: Information about the current user and their organizations and projects
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BuilderInfo"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
## Schema Components ##
components:
  schemas:
    Org:
      required:
        - id
        - label
        - createTime
        - defaultTeamId
      type: object
      properties:
        id:
          type: string
          description: The organization ID.
          example: org-123
        label:
          type: string
          description: The organization label.
          example: Acme Inc
        defaultTeamId:
          type: string
          description: The ID of the Everyone team for the org.
        createTime:
          type: string
          description: The time the organization was created.
          format: date-time
        updateTime:
          type: string
          description: The time the organization was updated.
          format: date-time
    Destination:
      required:
        - id
        - name
        - type
        - metadata
        - createTime
      type: object
      properties:
        id:
          type: string
          description: The destination ID.
        name:
          type: string
          description: User-defined name for the destination
          example: leadConvertedWebhook
        type:
          type: string
          description: The type of the destination
          example: webhook
        metadata:
          type: object
          properties:
            url:
              type: string
              description: Webhook URL
              example: https://webhooks.mailmonkey.com/salesforce-lead-converted
            headers:
              $ref: "#/components/schemas/WebhookHeaders"
        createTime:
          type: string
          description: The time the destination was created.
          format: date-time
        updateTime:
          type: string
          description: The time the destination was updated.
          format: date-time
    Project:
      required:
        - appName
        - createTime
        - id
        - name
      # TODO(ENG-1029): once all projects have been backfilled with org ID, add orgId to required list
      type: object
      properties:
        id:
          type: string
          description: The project ID.
          example: project-id-123
        name:
          type: string
          description: The project name.
          example: mailmonkey-staging
        appName:
          type: string
          description: The name of the application, which is displayed to end users.
          example: MailMonkey
        orgId:
          type: string
          description: The organization ID that this project belongs to.
        createTime:
          type: string
          description: The time the project was created.
          format: date-time
        updateTime:
          type: string
          description: The time the project was updated.
          format: date-time
    ProviderApp:
      required:
        - clientId
        - createTime
        - id
        - projectId
        - provider
      type: object
      properties:
        id:
          type: string
          description: The provider app ID.
          example: provider-app-123
        projectId:
          type: string
          description: The Ampersand project ID.
          example: project-456
        externalRef:
          type: string
          description: The ID used by the provider to identify the app (optional).
          example: external-id-123
        provider:
          type: string
          description: The SaaS provider that this app connects to.
          example: salesforce
        clientId:
          type: string
          description: The OAuth client ID for this app.
          example: client-id-123
        scopes:
          type: array
          description: The OAuth scopes for this app.
          items:
            type: string
            example:
              - oauth
              - offline
              - crm.read
        createTime:
          type: string
          description: The time the provider app was created.
          format: date-time
        updateTime:
          type: string
          description: The time the provider app was updated.
          format: date-time
    Integration:
      required:
        - createTime
        - id
        - latestRevision
        - name
        - projectId
        - provider
      type: object
      properties:
        id:
          type: string
          description: The integration ID.
          example: integration-123
        projectId:
          type: string
          description: The Ampersand project ID.
          example: project-456
        name:
          type: string
          description: The integration name.
          example: read-accounts
        provider:
          type: string
          description: The SaaS provider that this integration connects to.
          example: salesforce
        createTime:
          type: string
          description: The time the integration was created.
          format: date-time
        updateTime:
          type: string
          description: The time the integration was last updated.
          format: date-time
        latestRevision:
          $ref: "#/components/schemas/Revision"
    Revision:
      required:
        - content
        - createTime
        - id
        - specVersion
      type: object
      properties:
        id:
          type: string
          description: The revision ID.
          example: revision-id-1
        specVersion:
          type: string
          description: The spec version string (e.g. "0.1.0").
          example: 0.1.0
        createTime:
          type: string
          description: The time the revision was created.
          format: date-time
        content:
          $ref: "../manifest/manifest.yaml#/components/schemas/Integration"
    HydratedRevision:
      required:
        - content
        - createTime
        - id
        - specVersion
      type: object
      properties:
        id:
          type: string
          description: The revision ID.
          example: revision-id-1
        specVersion:
          type: string
          description: The spec version string (e.g. "0.1.0").
          example: 0.1.0
        createTime:
          type: string
          description: The time the revision was created.
          format: date-time
        content:
          $ref: "../manifest/manifest.yaml#/components/schemas/HydratedIntegration"
    Installation:
      required:
        - config
        - connection
        - createTime
        - createdBy
        - healthStatus
        - id
        - integrationId
        - projectId
      type: object
      properties:
        id:
          type: string
          description: The installation ID.
          example: installation-123
        projectId:
          type: string
          description: The Ampersand project ID.
          example: project-456
        integrationId:
          type: string
          description: The integration ID.
          example: integration-123
        group:
          $ref: "#/components/schemas/Group"
        healthStatus:
          type: string
          description: The health status of the installation ("healthy", "unhealthy").
          example: healthy
        connection:
          $ref: "#/components/schemas/Connection"
        createTime:
          type: string
          description: The time the integration was first installed.
          format: date-time
        createdBy:
          type: string
          description: The person who did the installation, in the format of "consumer:{consumer-id}".
          example: consumer:consumer-123
        updateTime:
          type: string
          description: The time the installation was last updated with a new config.
          format: date-time
        config:
          $ref: "#/components/schemas/Config"
    Config:
      required:
        - content
        - createTime
        - createdBy
        - id
        - revisionId
      type: object
      properties:
        id:
          type: string
          description: The config ID.
          example: config-123
        revisionId:
          type: string
          description: The ID of the revision that this config is based on.
          example: revision-123
        createTime:
          type: string
          description: The time the config was created.
          format: date-time
        createdBy:
          type: string
          description:
            The person who created the config, in the format of "consumer:{consumer-id}"
            or "builder:{builder-id}".
          example: builder:builder-123
        content:
          $ref: "../config/config.yaml#/components/schemas/ConfigContent"
    Connection:
      required:
        - consumer
        - createTime
        - group
        - id
        - projectId
        - providerApp
        - providerWorkspaceRef
      type: object
      properties:
        id:
          type: string
          description: The connection ID.
          example: connection-123
        projectId:
          type: string
          description: The Ampersand project ID.
          example: project-456
        providerApp:
          $ref: "#/components/schemas/ProviderApp"
        group:
          $ref: "#/components/schemas/Group"
        consumer:
          $ref: "#/components/schemas/Consumer"
        providerWorkspaceRef:
          type: string
          description: The identifier for the provider workspace (e.g. "salesforce-instance-domain")
          example: provider-workspace-123
        ProviderConsumerRef:
          type: string
          description:
            The ID that Salesforce/Hubspot uses to identify this user (e.g.
            Salesforce has IDs in the form of https://login.salesforce.com/id/00D4x0000019CQTEA2/0054x000000orJ4AA)
          example: provider-consumer-123
        createTime:
          type: string
          description: The time the connection was created.
          format: date-time
          example: 2023-07-13T21:34:44.816354Z
        updateTime:
          type: string
          description: The time the connection was last updated.
          format: date-time
          example: 2023-07-13T21:34:44.816354Z
    ImportConnectionRequest:
      required:
        - groupRef
        - groupName
        - consumerRef
        - consumerName
        - providerWorkspaceRef
        - refreshToken
      type: object
      properties:
        providerAppId:
          description:
            ID of the provider app (e.g. Salesforce connected app), returned from a CreateProviderApp call.
            If omitted, the default provider app that was set up on the Ampersand Dashboard is assumed.
          type: string
        groupRef:
          description:
            The ID of the user group that has access to this installation. This is any ID that your app uses
            to identify a group of users - such as an org, team, or workspace.
          type: string
        groupName:
          description: The display name of the user group that has access to this installation.
          type: string
        consumerRef:
          description:
            The ID of the user whose credential was used for this connection. This is the ID that your app
            uses to identify a user - such as a user ID or username.
          type: string
        consumerName:
          description: The display name of the user whose credential was used for this connection.
          type: string
        providerWorkspaceRef:
          type: string
          description: The identifier for the provider workspace (e.g. the Salesforce subdomain)
          example: provider-workspace-123
        providerConsumerRef:
          type: string
          description:
            The ID that Salesforce/Hubspot uses to identify this user (e.g.
            Salesforce has IDs in the form of https://login.salesforce.com/id/00D4x0000019CQTEA2/0054x000000orJ4AA)
          example: provider-consumer-123
        refreshToken:
          type: string
          description: The refresh token.
        scopes:
          type: array
          description: The OAuth scopes for this token. If omitted, will default to the scopes of the Provider App.
          items:
            type: string
    Group:
      required:
        - createTime
        - groupName
        - groupRef
        - projectId
      type: object
      properties:
        groupRef:
          type: string
          description: The ID of the user group that has access to this installation.
          example: group-123
        groupName:
          type: string
          description: The name of the user group that has access to this installation.
          example: Super Customer
        projectId:
          type: string
          description: The Ampersand project ID.
          example: project-456
        createTime:
          type: string
          description: The time the group was created.
          format: date-time
          example: 2023-07-13T21:34:44.816354Z
        updateTime:
          type: string
          description: The time the group was last updated.
          format: date-time
          example: 2023-07-13T21:34:44.816354Z
    Consumer:
      required:
        - consumerName
        - consumerRef
        - createTime
        - projectId
      type: object
      properties:
        consumerRef:
          type: string
          description: The consumer reference.
          example: consumer-123
        consumerName:
          type: string
          description: The name of the consumer.
          example: Super Customer
        projectId:
          type: string
          description: The Ampersand project ID.
          example: project-456
        createTime:
          type: string
          description: The time the consumer was created.
          format: date-time
          example: 2023-07-13T21:34:44.816354Z
        updateTime:
          type: string
          description: The time the consumer was last updated.
          format: date-time
          example: 2023-07-13T21:34:44.816354Z
    OperationEvent:
      required:
        - id
        - operationId
        - type
        - status
      type: object
      properties:
        id:
          type: string
          description: The operation event ID.
          example: operation-event-123
        operationId:
          type: string
          description: The operation ID.
          example: operation-123
        type:
          type: string
          description: The operation event type.
          example: ValidateParameters
        status:
          type: string
          description: The status of the operation event.
          example: in_progress
        result:
          type: string
          description: The result of the operation event.
          example: "Validated parameters successfully"
        createTime:
          type: string
          description: The time the operation event was created.
          format: date-time
    Operation:
      required:
        - projectId
        - integrationId
        - installationId
        - configId
        - actionType
        - status
        - id
      type: object
      properties:
        projectId:
          type: string
          description: The Ampersand project ID.
          example: project-456
        integrationId:
          type: string
          description: The integration ID.
          example: integration-123
        configId:
          type: string
          description: The config ID.
          example: config-123
        actionType:
          type: string
          description: The action type to perform for the given object.
          example: read
        id:
          type: string
          description: The operation ID.
          example: operation-123
        installationId:
          type: string
          description: The Ampersand installation ID.
          example: installation-123
        status:
          type: string
          description: The status of the operation.
          example: success
        result:
          type: string
          description: The result of the operation.
          example: "[object] No changes"
        latestOperationEventId:
          type: string
          description: The latest operation event ID.
          example: operation-event-123
        metadata:
          type: object
          description: Metadata associated with the operation.
          example: {}
        createTime:
          type: string
          description: The time the operation was created.
          format: date-time
          example: 2023-07-13T21:34:44.816354Z
    Log:
      type: object
      required:
        - timestamp
        - severity
        - message
      properties:
        timestamp:
          type: string
          description: The time the log was created.
          example: 2023-07-13T21:34:44.816354Z
        message:
          type: object
          description: The log message object.
          required:
            - msg
          properties:
            msg:
              type: string
              description: The use-readable message.
              example: "This is a log message"
            operation_event_id:
              type: string
              description: The operation event ID.
            operation_id:
              type: string
              description: The operation ID.
        severity:
          type: string
          description: The severity of the log.
          example: DEBUG
    SignedUrl:
      type: object
      required:
        - url
        - bucket
        - path
      properties:
        url:
          type: string
          description: The signed URL to upload the zip file to.
        bucket:
          type: string
          description: The bucket (will match the bucket part of the url).
        path:
          type: string
          description: The path (will match the path part of the url).
    ApiKeyScopes:
      type: array
      description: The scopes for the API key.
      items:
        type: string
        example:
          - full
          - frontend
    ApiKeyRequest:
      type: object
      required:
        - label
      properties:
        label:
          type: string
          description: A short name for the API key.
          example: MailMonkey API Key
        scopes:
          $ref: "#/components/schemas/ApiKeyScopes"
    ApiKey:
      type: object
      required:
        - key
        - projectId
        - label
        - scopes
      properties:
        key:
          type: string
          description: The API key.
          example: api-key-123
        label:
          type: string
          description: A short name for the API key.
          example: MailMonkey API Key
        scopes:
          $ref: "#/components/schemas/ApiKeyScopes"
        projectId:
          type: string
          description: The project ID.
          example: project-id-123
        active:
          type: boolean
          description: Whether the API key is active.
          example: true
    PatchApiKeyRequest:
      type: object
      required:
        - updateMask
        - apiKey
      properties:
        updateMask:
          type: array
          example:
            - label
            - active
            - scopes
          items:
            type: string
            description: fields to update.
            example: label
        apiKey:
          type: object
          properties:
            label:
              type: string
              description: A short name for the API key.
              example: MailMonkey API Key
            active:
              type: boolean
              description: Whether the API key is active.
              example: true
            scopes:
              $ref: "#/components/schemas/ApiKeyScopes"
    WebhookHeaders:
      type: object
      nullable: true
      description: Additional headers to add when Ampersand sends a webhook message
      additionalProperties:
        type: string
        nullable: false
      example:
        Authorization: "Bearer 1234"
    Invite:
      type: object
      required:
        - id
        - invitedEmail
        - createTime
        - parentId
        - parentType
        - status
      properties:
        id:
          type: string
          description: The invite ID.
        invitedEmail:
          type: string
          description: The email address of the person invited.
        parentType:
          type: string
          enum: [org]
          description: The type of entity that the person is invited to.
        parentId:
          type: string
          description: The ID of the parent (e.g. org ID).
        status:
          type: string
          description: The status of the invite.
          enum: [pending, accepted, revoked, expired]
        createTime:
          type: string
          description: The time the invite was created.
          format: date-time
        updateTime:
          type: string
          description: The time the invite was updated.
          format: date-time
    Builder:
      type: object
      required:
        - id
        - idpProvider
        - idpRef
        - createTime
      properties:
        id:
          type: string
          description: The builder ID.
          example: builder-id-123
        idpProvider:
          type: string
          description: The identity provider
          example: clerk
        idpRef:
          type: string
          description: ID used by the identity provider
        createTime:
          type: string
          description: The time that the builder joined Ampersand.
          format: date-time
        firstName:
          type: string
        lastName:
          type: string
        fullName:
          type: string
        primaryEmail:
          type: string
    BuilderInfo:
      type: object
      required:
        - builder
        - projectRoles
      properties:
        builder:
          $ref: "#/components/schemas/Builder"
        projectRoles:
          type: object
          description: A map of project IDs to project roles for the builder.
          additionalProperties:
            type: object
            required:
              - role
              - principalType
              - principalId
              - project
            properties:
              role:
                type: string
                description: The role of the builder in the project.
                example: admin
              principalType:
                type: string
                description: The type of the principal.
                enum:
                  - team
                  - builder
              principalId:
                type: string
                description: The ID of the team or builder.
                example: builder-id-123
              project:
                $ref: "#/components/schemas/Project"
        orgRole:
          type: object
          required:
            - role
            - principalType
            - principalId
            - org
          properties:
            role:
              type: string
              description: The role of the builder in the org.
              example: admin
            principalType:
              type: string
              description: The type of the principal.
              enum:
                - team
                - builder
            principalId:
              type: string
              description: The ID of the team or builder.
              example: builder-id-123
            org:
              $ref: "#/components/schemas/Org"
  securitySchemes:
    APIKeyHeader:
      type: apiKey
      name: X-Api-Key
      in: header
    APIKeyQueryParam:
      type: apiKey
      name: apiKey
      in: query
    Bearer:
      type: apiKey
      name: Authorization
      in: header
security:
  - APIKeyHeader: []
