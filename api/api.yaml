openapi: 3.0.1
info:
  title: Ampersand public API
  version: 1.0.0
servers:
  - url: https://api.withampersand.com/v1
paths:
  /oauth-connect:
    post:
      operationId: oauthConnect
      summary: Get URL for OAuth flow
      description: Generate a URL for the browser to render to kick off OAuth flow. You can use this endpoint as an alternative to the [prebuilt UI components](https://docs.withampersand.com/embeddable-ui-components).
      tags: ["OAuth"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - projectId
                - groupRef
                - consumerRef
                - provider
              properties:
                projectId:
                  type: string
                  description: The Ampersand project ID.
                  example: my-project
                provider:
                  type: string
                  description: The provider that this app connects to.
                  example: salesforce
                groupRef:
                  type: string
                  description: The ID that your app uses to identify the group of users for this Connection, this can be an Org ID, workspace ID, etc.
                  example: group-123
                groupName:
                  type: string
                  description: The display name for the group. Defaults to groupRef if not provided.
                  example: Organization Name
                consumerRef:
                  type: string
                  description: The ID that your app uses to identify the user whose SaaS credential will be used for this OAuth flow.
                  example: user_123456
                consumerName:
                  type: string
                  description: The display name for the consumer. Defaults to consumerRef if not provided.
                  example: John Doe
                providerWorkspaceRef:
                  type: string
                  description: The identifier for the provider workspace (e.g. the Salesforce subdomain).
                  example: salesforce-instance-domain
                providerMetadata:
                  $ref: "#/components/schemas/ProviderMetadata"
                providerAppId:
                  type: string
                  description:
                    ID of the provider app, returned from a CreateProviderApp call.
                    If omitted, the default provider app that was set up on the Ampersand Dashboard is assumed.
                  example: 32356abe-d2fd-49c7-9030-abdcbc6456d4
                enableCSRFProtection:
                  type: boolean
                  description: This boolean flag is used by the UI library internally. Set it to false or omit it when manually calling this API.
                  example: false
        required: true
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: string
                description: URL to render
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: connectOAuthParams
  /projects/{projectIdOrName}/connections/{connectionId}:oauth-update:
    patch:
      operationId: oauthUpdate
      summary: Get URL for updating OAuth connection
      description: Generate a URL for the browser to render to kick off OAuth flow that updates an existing connection.
      tags: ["OAuth"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
          description: Ampersand Project ID or name.
        - name: connectionId
          in: path
          required: true
          schema:
            type: string
          description: ID of connection to update.
      responses:
        200:
          description: OAuth update initiated successfully
          content:
            text/plain:
              schema:
                type: string
                description: URL to initiate OAuth flow
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /projects:
    get:
      summary: List all projects that the API key or user credential has access to.
      operationId: listProjects
      tags: ["Project"]
      responses:
        200:
          description: List of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
    post:
      summary: Create a new project
      operationId: createProject
      tags: ["Project"]
      requestBody:
        content:
          application/json:
            schema:
              # TODO(ENG-1029): once all projects have been backfilled with org ID, add orgId to required list
              required:
                - appName
                - name
                - orgId
              type: object
              properties:
                appName:
                  type: string
                  description: The app name.
                  example: MailMonkey
                name:
                  type: string
                  description: The project name. Must be alphanumerics and hyphens only. Project names will be save in lowercase.
                  example: mailmonkey-staging
                orgId:
                  type: string
                  description: The organization ID.
                  example: 9f7c3e2a-61b8-4f5c-8d1a-eb24f3b05d79
        required: true
      responses:
        201:
          description: The newly created project
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: project
  /projects/{projectIdOrName}:
    get:
      summary: Get a project
      operationId: getProject
      tags: ["Project"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
        - name: includeEntitlements
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: Project
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        404:
          description: Project not found
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
    # Uncomment when ENG-2300 is fixed
    # delete:
    #   summary: Delete a project
    #   operationId: deleteProject
    #   tags: ["Project"]
    #   parameters:
    #     - name: projectIdOrName
    #       in: path
    #       required: true
    #       description: The Ampersand project ID or project name.
    #       schema:
    #         type: string
    #       example: my-project
    #   responses:
    #     204:
    #       description: Deleted
    #     422:
    #       description: Unprocessable Entity
    #       content:
    #         application/problem+json:
    #           schema:
    #             $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
    #     default:
    #       description: Error
    #       content:
    #         application/problem+json:
    #           schema:
    #             $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
    patch:
      summary: Update a project
      operationId: updateProject
      tags: ["Project"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
      requestBody:
        content:
          application/json:
            schema:
              required:
                - project
                - updateMask
              type: object
              properties:
                updateMask:
                  type: array
                  items:
                    type: string
                  description: |
                    Array of field paths specifying which fields to update. Allowed values include:
                    - appName
                    - name
                  example: ["appName", "name"]
                project:
                  type: object
                  properties:
                    appName:
                      type: string
                      description: The app name.
                      example: MailMonkey
                    name:
                      type: string
                      description: The project name.
                      example: mailmonkey-staging
                  description: The project fields to update. (Only include the
                    fields you'd like to update.)
        required: true
      responses:
        200:
          description: The updated project.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: projectUpdate
  /projects/{projectIdOrName}/provider-apps:
    get:
      summary: List provider apps
      operationId: listProviderApps
      tags: ["Provider App"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: TThe Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
      responses:
        200:
          description: List of provider apps
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProviderApp"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
    post:
      summary: Create a new provider app
      operationId: createProviderApp
      tags: ["Provider App"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
      requestBody:
        content:
          application/json:
            schema:
              required:
                - clientId
                - clientSecret
                - provider
              type: object
              properties:
                externalRef:
                  type: string
                  description: The ID used by the provider to identify the app (optional).
                  example: external-id-123
                provider:
                  type: string
                  description: The SaaS provider that this app connects to.
                  example: salesforce
                clientId:
                  type: string
                  description: The OAuth client ID for this app.
                  example: client-id-123
                clientSecret:
                  type: string
                  description: The OAuth client secret for this app.
                  example: client-secret-123
                scopes:
                  type: array
                  description: The OAuth scopes for this app.
                  items:
                    type: string
                    example:
                      - read
                      - write
        required: true
      responses:
        200:
          description: The newly created provider app
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProviderApp"
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: providerApp
  /projects/{projectIdOrName}/provider-apps/{providerAppId}:
    delete:
      summary: Delete a provider app.
      operationId: deleteProviderApp
      tags: ["Provider App"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
        - name: providerAppId
          in: path
          required: true
          description: ID of the provider app, returned by the CreateProviderApp call.
          schema:
            type: string
          example: 32356abe-d2fd-49c7-9030-abdcbc6456d4
      responses:
        204:
          description: Deleted
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
    patch:
      summary: Update a provider app
      operationId: updateProviderApp
      tags: ["Provider App"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
        - name: providerAppId
          in: path
          required: true
          description: ID of the provider app, returned by the CreateProviderApp call.
          schema:
            type: string
          example: 32356abe-d2fd-49c7-9030-abdcbc6456d4
      requestBody:
        content:
          application/json:
            schema:
              required:
                - providerApp
                - updateMask
              type: object
              properties:
                updateMask:
                  type: array
                  items:
                    type: string
                  description: |
                    Array of field paths specifying which fields to update. Allowed values include:
                    - externalRef
                    - clientId
                    - clientSecret
                    - provider
                    - scopes
                  example: ["externalRef", "clientId"]
                providerApp:
                  type: object
                  properties:
                    externalRef:
                      type: string
                      description:
                        The ID used by the provider to identify the app
                        (optional).
                      example: external-id-123
                    provider:
                      type: string
                      description: The SaaS provider that this app connects to.
                      example: salesforce
                    clientId:
                      type: string
                      description: The OAuth client ID for this app.
                      example: client-id-123
                    clientSecret:
                      type: string
                      description: The OAuth client secret for this app.
                      example: client-secret-123
                    scopes:
                      type: array
                      description: The OAuth scopes for this app.
                      items:
                        type: string
                        example:
                          - read
                          - write
                  description:
                    The provider app fields to update. (Only include the
                    fields you'd like to update.)
        required: true
      responses:
        200:
          description: The updated provider app
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProviderApp"
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: providerAppUpdate
  /projects/{projectIdOrName}/integrations:
    get:
      summary: List integrations
      operationId: listIntegrations
      tags: ["Integration"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
      responses:
        200:
          description: List of integrations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Integration"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
    post:
      summary: Create a new integration.
      operationId: createIntegration
      tags: ["Integration"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
      requestBody:
        content:
          application/json:
            schema:
              required:
                - name
                - provider
                - latestRevision
              type: object
              properties:
                name:
                  type: string
                  description: The integration name.
                  example: my-integration
                provider:
                  type: string
                  description: The provider name (e.g. "salesforce", "hubspot")
                latestRevision:
                  type: object
                  required:
                    - content
                    - specVersion
                  properties:
                    specVersion:
                      type: string
                      description: The spec version string.
                      example: 1.0.0
                    content:
                      $ref: "../manifest/manifest.yaml#/components/schemas/Integration"
        required: true
      responses:
        201:
          description: Created
          content: {}
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: integration
  /projects/{projectIdOrName}/integrations/{integrationIdOrName}:
    get:
      summary: Get an integration by ID or name
      operationId: getIntegration
      tags: ["Integration"]
      parameters:
        - name: integrationIdOrName
          in: path
          required: true
          description: The integration ID or name.
          schema:
            type: string
          example: 123e4567-e89b-12d3-a456-426614174000
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
      responses:
        200:
          description: The integration
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Integration"
        404:
          description: Integration not found
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /projects/{projectIdOrName}/integrations/{integrationId}:
    delete:
      summary: Delete an integration
      operationId: deleteIntegration
      tags: ["Integration"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          schema:
            type: string
          example: 123e4567-e89b-12d3-a456-426614174000
      responses:
        204:
          description: Deleted
        404:
          description: Integration not found
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /projects/{projectIdOrName}/integrations:batch:
    put:
      summary: Batch upsert a group of integrations
      operationId: batchUpsertIntegrations
      tags: ["Integration"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
        - name: destructive
          in: query
          required: false
          description: Defaults to false. This flag controls whether to perform destructive actions when deploying integrations, like pausing all read actions for an object that was removed in the latest revision.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sourceZipUrl:
                  type: string
                  description:
                    URL of where a zip of the source files can be downloaded
                    (e.g. Google Cloud Storage URL).
                  example: https://storage.googleapis.com/my-bucket/source-files/integration-v1.2.3.zip
                sourceYaml:
                  type: string
                  description: A YAML string that defines the integrations.
              description: The source of the integrations to upsert. One of sourceZipUrl or sourceYaml is required.
      responses:
        200:
          description: Upserted integrations.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Integration"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /projects/{projectIdOrName}/integrations/{integrationId}/revisions:
    post:
      summary: Create a new revision.
      operationId: createRevision
      tags: ["Revision"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          schema:
            type: string
        - name: destructive
          in: query
          required: false
          description: Defaults to false. This flag controls whether to perform destructive actions when deploying integrations, like pausing all read actions for an object that was removed in the latest revision.
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sourceZipUrl:
                  type: string
                  description:
                    URL of where a zip of the source files can be downloaded
                    (e.g. Google Cloud Storage URL).
                  example: https://storage.googleapis.com/my-bucket/source-files/integration-v1.2.3.zip
                sourceYaml:
                  type: string
                  description: The source YAML file that defines the revision.
              description: The source of the revision to create. One of sourceZipUrl or sourceYaml is required.
        required: true
      responses:
        201:
          description: Created
          content: {}
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: revision
  /projects/{projectIdOrName}/integrations/{integrationId}/revisions/{revisionId}:hydrate:
    get:
      summary: Hydrate a revision
      description: Hydrate a revision with information from the consumer's SaaS instance.
      operationId: getHydratedRevision
      tags: ["Revision"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          schema:
            type: string
        - name: revisionId
          in: path
          required: true
          description: The revision ID.
          schema:
            type: string
        - name: connectionId
          in: query
          required: true
          description: The connection ID.
          schema:
            type: string
      responses:
        200:
          description: Hydrated revision
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HydratedRevision"
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /projects/{projectIdOrName}/integrations/{integrationId}/installations:
    get:
      summary: List installations
      operationId: listInstallations
      tags: ["Installation"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
        - name: integrationId
          in: path
          required: true
          schema:
            type: string
        - name: groupRef
          in: query
          description: The ID of the user group that has access to this installation.
          example: group-123
          schema:
            type: string
      responses:
        200:
          description: List of installations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Installation"
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
    post:
      summary: Create a new installation
      operationId: createInstallation
      tags: ["Installation"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - config
                - groupRef
              type: object
              properties:
                groupRef:
                  type: string
                  description: The ID of the user group that has access to this installation.
                  example: group-123
                connectionId:
                  type: string
                  description:
                    The ID of the SaaS connection tied to this installation.
                    If omitted the default connection for this group will be used.
                config:
                  required:
                    - content
                  type: object
                  properties:
                    revisionId:
                      type: string
                      deprecated: true
                      description:
                        "Deprecated: This field will be automatically set to the latest revision."
                    createdBy:
                      type: string
                      description:
                        The person who created the config, in the format
                        of "consumer:{consumer-id}" or "builder:{builder-id}".
                      default: "api:create-installation"
                    content:
                      $ref: "../config/config.yaml#/components/schemas/ConfigContent"
                  description: The config of the installation.
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Installation"
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: installation
  /projects/{projectIdOrName}/integrations/{integrationId}/installations/{installationId}:
    get:
      summary: Get an installation
      operationId: getInstallation
      tags: ["Installation"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          schema:
            type: string
        - name: installationId
          in: path
          required: true
          description: The installation ID.
          schema:
            type: string
      responses:
        200:
          description: The installation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Installation"
        400:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
    delete:
      summary: Delete an installation
      operationId: deleteInstallation
      tags: ["Installation"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          schema:
            type: string
        - name: installationId
          in: path
          required: true
          schema:
            type: string
          description: The Ampersand installation ID.
      responses:
        204:
          description: Deleted
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
    patch:
      summary: Update an installation
      operationId: updateInstallation
      tags: ["Installation"]
      description: |
        NOTE: Updating an installation with the Subscribe action typically takes 1–2 minutes, but it may take up to 10 minutes to take effect due to delays in the provider’s system.
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          schema:
            type: string
        - name: installationId
          in: path
          required: true
          description: The Ampersand installation ID.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - installation
                - updateMask
              type: object
              properties:
                updateMask:
                  type: array
                  items:
                    type: string
                  description: |
                    Array of field paths specifying which fields to update. Allowed values include:
                    - connectionId
                    - config.createdBy
                    - config.content.read.objects.<object-name>
                    - config.content.write.objects.<object-name>
                    - config.content.write.objects
                    - config.content.subscribe.objects.<object-name>
                    - config.content.proxy.enabled

                    `<object-name>` means you can specify any object name.
                  example: ["config.content.read.objects.contacts", "config.content.write.objects.leads"]
                installation:
                  type: object
                  properties:
                    connectionId:
                      type: string
                      description: The ID of the SaaS connection tied to this installation.
                      example: connection-123
                    config:
                      type: object
                      properties:
                        revisionId:
                          type: string
                          deprecated: true
                          description:
                            "Deprecated: This field will be automatically set to the latest revision ID."
                        createdBy:
                          type: string
                          description:
                            The person who created the config, in the format
                            of "consumer:{consumer-id}" or "builder:{builder-id}".
                        content:
                          $ref: "../config/config.yaml#/components/schemas/UpdateInstallationConfigContent"
                          description: The content of the config.
                      description: The config of the installation.
                  description:
                    The installation fields to update. (Only include the
                    fields you'd like to update.)
        required: true
      responses:
        200:
          description: The updated installation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Installation"
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: installationUpdate
  /projects/{projectIdOrName}/integrations/{integrationId}/objects/{objectName}/metadata:
    get:
      summary: Get object metadata for installation
      description: |
        Retrieves metadata about an object in a customer's SaaS instance, including its fields.
        This endpoint requires that an Installation exists for the given groupRef.
        It applies object mappings.
      tags: ["Objects & Fields"]
      operationId: getObjectMetadataForInstallation
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The unique identifier or name of the project.
          schema:
            type: string
          example: my-project
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          schema:
            type: string
        - name: objectName
          in: path
          required: true
          description: Object name (mapped or unmapped)
          schema:
            type: string
        - name: groupRef
          in: query
          required: false
          description: The groupRef for the installation
          example: group-123
          schema:
            type: string
      responses:
        '200':
          description: The retrieved object metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectMetadata'
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /projects/{projectIdOrName}/installations:
    get:
      summary: List installations for a project
      description: |
        Lists all installations for a given project and query parameters.
      operationId: listInstallationsForProject
      tags: ["Installation"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
        - name: groupRef
          in: query
          description: The group ref to filter by.
          example: groupRef123
          schema:
            type: string
      responses:
        200:
          description: List of installations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Installation"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /projects/{projectIdOrName}/providers/{provider}/objects/{objectName}/metadata:
    get:
      summary: Get object metadata for connection
      description: |
        Retrieves metadata about an object in a customer's SaaS instance, including its fields.
        This endpoint only requires that a Connection exists for the given groupRef.
        It does not apply any object mappings.
      tags: ["Objects & Fields"]
      operationId: getObjectMetadataForConnection
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The unique identifier or name of the project.
          schema:
            type: string
          example: my-project
        - name: provider
          in: path
          required: true
          description: The API Provider
          schema:
            type: string
        - name: objectName
          in: path
          required: true
          description: Object name (mapped or unmapped)
          schema:
            type: string
        - name: groupRef
          in: query
          required: false
          description: The groupRef for the connection.
          example: group-123
          schema:
            type: string
      responses:
        '200':
          description: The retrieved object metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectMetadata'
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /projects/{projectIdOrName}/integrations/{integrationId}/object-metadata:
    put:
      summary: Upsert custom fields for installation
      operationId: upsertMetadataForInstallation
      description: Create or update fields in the SaaS instance tied to an installation. Only HubSpot and Salesforce are supported currently.
      tags: ["Objects & Fields"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          schema:
            type: string
          example: 32356abe-d2fd-49c7-9030-abdcbc6456d4
        - name: groupRef
          in: query
          required: true
          description: The groupRef for the installation
          schema:
            type: string
          example: group-123
      requestBody:
        required: true
        description: Metadata upsert request containing field definitions to create or update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertMetadataRequest'
            examples:
              createTextFields:
                summary: Create text fields on multiple objects
                value:
                  fields:
                    Account:
                      - fieldName: "Industry"
                        displayName: "Industry Sector"
                        description: "The industry this account operates in"
                        valueType: "string"
                        required: false
                        stringOptions:
                          length: 255
                          defaultValue: "Technology"
                      - fieldName: "Company_Size"
                        displayName: "Company Size"
                        valueType: "string"
                        stringOptions:
                          values: ["Small", "Medium", "Large", "Enterprise"]
                          valuesRestricted: true
                    Contact:
                      - fieldName: "Seniority_Level"
                        displayName: "Seniority Level"
                        valueType: "string"
                        stringOptions:
                          values: ["Junior", "Mid", "Senior", "Executive"]
                          valuesRestricted: true
              createNumericFields:
                summary: Create numeric fields with constraints
                value:
                  fields:
                    Opportunity:
                      - fieldName: "Deal_Score"
                        displayName: "Deal Score"
                        description: "Likelihood score from 0-100"
                        valueType: "float"
                        required: true
                        numericOptions:
                          precision: 5
                          scale: 2
                          min: 0
                          max: 100
                          defaultValue: 50
              createAssociationField:
                summary: Create field with association to another object
                value:
                  fields:
                    Task:
                      - fieldName: "Related_Contact"
                        displayName: "Related Contact"
                        valueType: "string"
                        association:
                          associationType: "lookup"
                          targetObject: "Contact"
                          targetField: "Id"
                          cardinality: "many-to-one"
                          required: false
                          labels:
                            singular: "Contact"
                            plural: "Contacts"
      responses:
        '200':
          description: Metadata creation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertMetadataResponse'
        '400':
          description: Invalid request payload or validation errors
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
        '401':
          description: Authentication required
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
        '403':
          description: Insufficient permissions for metadata operations
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
        '404':
          description: Project, integration, or installation not found
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
        '500':
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /projects/{projectIdOrName}/providers/{provider}/object-metadata:
    put:
      summary: Upsert custom fields for connection
      operationId: upsertMetadataForConnection
      description: Create or update fields in the SaaS instance tied to a connection. Only HubSpot and Salesforce are supported currently.
      tags: ["Objects & Fields"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
        - name: provider
          in: path
          required: true
          description: The provider that this connection connects to.
          schema:
            type: string
          example: salesforce
        - name: groupRef
          in: query
          required: true
          description: The ID that your app uses to identify the group of users for this Connection.
          schema:
            type: string
          example: group-123
      requestBody:
        required: true
        description: Metadata upsert request containing field definitions to create or update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertMetadataRequest'
            examples:
              createTextFields:
                summary: Create text fields on multiple objects
                value:
                  fields:
                    Account:
                      - fieldName: "Industry"
                        displayName: "Industry Sector"
                        description: "The industry this account operates in"
                        valueType: "string"
                        required: false
                        stringOptions:
                          length: 255
                          defaultValue: "Technology"
                      - fieldName: "Company_Size"
                        displayName: "Company Size"
                        valueType: "string"
                        stringOptions:
                          values: ["Small", "Medium", "Large", "Enterprise"]
                          valuesRestricted: true
                    Contact:
                      - fieldName: "Seniority_Level"
                        displayName: "Seniority Level"
                        valueType: "string"
                        stringOptions:
                          values: ["Junior", "Mid", "Senior", "Executive"]
                          valuesRestricted: true
              createNumericFields:
                summary: Create numeric fields with constraints
                value:
                  fields:
                    Opportunity:
                      - fieldName: "Deal_Score"
                        displayName: "Deal Score"
                        description: "Likelihood score from 0-100"
                        valueType: "float"
                        required: true
                        numericOptions:
                          precision: 5
                          scale: 2
                          min: 0
                          max: 100
                          defaultValue: 50
              createAssociationField:
                summary: Create field with association to another object
                value:
                  fields:
                    Task:
                      - fieldName: "Related_Contact"
                        displayName: "Related Contact"
                        valueType: "string"
                        association:
                          associationType: "lookup"
                          targetObject: "Contact"
                          targetField: "Id"
                          cardinality: "many-to-one"
                          required: false
                          labels:
                            singular: "Contact"
                            plural: "Contacts"
      responses:
        '200':
          description: Metadata creation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertMetadataResponse'
        '400':
          description: Invalid request payload or validation errors
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
        '401':
          description: Authentication required
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
        '403':
          description: Insufficient permissions for metadata operations
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
        '404':
          description: Project or connection not found
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
        '500':
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /projects/{projectIdOrName}/integrations/{integrationId}/installations/{installationId}/operations:
    get:
      summary: List operations
      operationId: listOperations
      tags: ["Operation"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          schema:
            type: string
        - name: installationId
          in: path
          required: true
          description: The Ampersand installation ID.
          schema:
            type: string
        - name: pageSize
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 200
          description: The number of operations to return.
        - name: pageToken
          in: query
          schema:
            type: string
          description: A cursor that can be passed to paginate through multiple pages of operations.
      responses:
        200:
          description: List of operations
          content:
            application/json:
              schema:
                type: object
                required:
                  - results
                  - pagination
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Operation'
                  pagination:
                    $ref: '#/components/schemas/PaginationInfo'
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /projects/{projectIdOrName}/operations/{operationId}:
    get:
      summary: Get an operation
      operationId: getOperation
      tags: ["Operation"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
        - name: operationId
          in: path
          required: true
          description: Operation ID.
          schema:
            type: string
      responses:
        200:
          description: Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /projects/{projectIdOrName}/operations/{operationId}/logs:
    get:
      summary: List logs for an operation
      operationId: listOperationLogs
      tags: ["Operation"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
        - name: operationId
          in: path
          required: true
          description: Operation ID.
          schema:
            type: string
      responses:
        200:
          description: List of logs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Log"
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /providers:
    get:
      summary: List providers
      operationId: listProviders
      tags: ["Provider"]
      responses:
        200:
          description: List of providers & their information
          content:
            application/json:
              schema:
                $ref: "../catalog/catalog.yaml#/components/schemas/CatalogType"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /providers/{provider}:
    get:
      summary: Get provider
      operationId: getProvider
      tags: ["Provider"]
      parameters:
        - name: provider
          in: path
          required: true
          description: The API provider.
          example: hubspot
          schema:
            type: string
      responses:
        200:
          description: ProviderInfo
          content:
            application/json:
              schema:
                $ref: "../catalog/catalog.yaml#/components/schemas/ProviderInfo"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /projects/{projectIdOrName}/api-keys:
    get:
      x-speakeasy-ignore: true
      summary: List API keys
      operationId: listApiKeys
      tags: ["API Key"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
        - name: active
          in: query
          description: Whether to include only active API keys. If false, all API keys are included.
          schema:
            type: boolean
      responses:
        200:
          description: List of API keys
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiKey"
        404:
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
    post:
      x-speakeasy-ignore: true
      summary: Create a new API key
      operationId: createApiKey
      tags: ["API Key"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiKeyRequest"
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKey"
        404:
          description: Project not found
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: apiKey
  /projects/{projectIdOrName}/api-keys/{apiKey}:
    get:
      x-speakeasy-ignore: true
      summary: Get an API key
      operationId: getApiKey
      tags: ["API Key"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
        - name: apiKey
          in: path
          required: true
          description: API key to access Ampersand APIs.
          schema:
            type: string
      responses:
        404:
          description: API key not found
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        200:
          description: API key
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKey"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
    delete:
      x-speakeasy-ignore: true
      summary: Delete an API key
      operationId: deleteApiKey
      tags: ["API Key"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
        - name: apiKey
          in: path
          required: true
          description: API key to access Ampersand APIs.
          schema:
            type: string
      responses:
        404:
          description: Not found
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        204:
          description: Deleted
    patch:
      x-speakeasy-ignore: true
      summary: Update an API key
      operationId: updateApiKey
      tags: ["API Key"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
        - name: apiKey
          in: path
          required: true
          description: API key to access Ampersand APIs.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchApiKeyRequest"
        required: true
      responses:
        200:
          description: API key updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKey"
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        404:
          description: Not found
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /projects/{projectIdOrName}/connections:
    get:
      summary: List connections
      operationId: listConnections
      tags: ["Connection"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
        - name: provider
          in: query
          description: The provider name (e.g. "salesforce", "hubspot")
          schema:
            type: string
        - name: groupRef
          in: query
          description: The ID of the user group that has access to this installation.
          example: group-123
          schema:
            type: string
        - name: consumerRef
          in: query
          description: The consumer reference.
          schema:
            type: string
      responses:
        200:
          description: List of project connections.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Connection"
        404:
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /projects/{projectIdOrName}/connections:generate:
    post:
      summary: Generate a new connection
      description: All auth schemes are supported, but for OAuth2 Authorization Code, it is recommended that you use the [/oauth-connect endpoint](https://docs.withampersand.com/reference/oauth/get-url-for-oauth-flow) instead, unless you already have the refresh token and are importing it into Ampersand.
      operationId: generateConnection
      tags: ["Connection"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenerateConnectionRequest"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connection"
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: generateConnectionParams
  /projects/{projectIdOrName}/connections/{connectionId}:
    get:
      summary: Get a connection
      operationId: getConnection
      tags: ["Connection"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
        - name: connectionId
          in: path
          required: true
          schema:
            type: string
        - name: includeCreds
          in: query
          schema:
            type: boolean
          description: Whether to include the credentials in the response. Only access token will be included. Default is false.
        - name: includeRefreshToken
          in: query
          schema:
            type: boolean
          description: Whether to include the refresh token in credentials in the response along with access token. If true, the `includeCreds` query parameter will be ignored. Default is false.
        - name: refresh
          in: query
          schema:
            type: string
            enum: [force, ifExpired]
          description:
            Whether to refresh the access token. If value is `ifExpired`, the access token will be refreshed only if it has expired. If value is `force`, the access token will be refreshed regardless of its expiration.
      responses:
        200:
          description: Connection
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connection"
        404:
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
    patch:
      summary: Update a connection.
      description: Update an existing connection.
      operationId: updateConnection
      tags: ["Connection"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
          description: Project ID or Name.
        - name: connectionId
          in: path
          required: true
          schema:
            type: string
          description: Connection ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateConnectionRequest'
      responses:
        '200':
          description: Connection updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
        400:
          description: Bad request.
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
    delete:
      summary: Delete a connection
      operationId: deleteConnection
      tags: ["Connection"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
        - name: connectionId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Deleted
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /projects/{projectIdOrName}/destinations:
    post:
      summary: Create a new destination
      operationId: createDestination
      tags: ["Destination"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - type
                - metadata
              properties:
                name:
                  type: string
                  description: Name for the new destination.
                    Must be unique within the project and can only contain letters, numbers and dashes.
                  example: leadConvertedWebhook
                type:
                  type: string
                  description: The type of the destination.
                  example: webhook
                  enum: [webhook, kinesis]
                secrets:
                  type: object
                  description: Secrets for the destination.
                  properties:
                    awsKeyId:
                      type: string
                      description: The AWS access key ID for the Kinesis destination.
                      example: AKIAIOSFODNN7EXAMPLE
                      x-go-type-skip-optional-pointer: true
                    awsSecretKey:
                      type: string
                      description: The AWS secret access key for the Kinesis destination.
                      example: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
                      x-go-type-skip-optional-pointer: true
                    awsSessionToken:
                      type: string
                      description: The AWS session token for the Kinesis destination.
                      example: AQoEXAMPLEH4aoAH0gNCAPy...
                      x-go-type-skip-optional-pointer: true
                metadata:
                  type: object
                  properties:
                    url:
                      type: string
                      description: Webhook URL, must start with "https://".
                      example: https://webhooks.mailmonkey.com/salesforce-lead-converted
                    headers:
                      $ref: "#/components/schemas/WebhookHeaders"
                    region:
                      type: string
                      description: The AWS region where the kinesis destination is hosted.
                      example: us-east-1
                      x-go-type-skip-optional-pointer: true
                    streamName:
                      type: string
                      description: The name of the Kinesis stream to send events to.
                      example: my-kinesis-stream
                      x-go-type-skip-optional-pointer: true
                    endpointUrl:
                      type: string
                      description: The endpoint URL for the Kinesis stream.
                      example: https://kinesis.us-east-1.amazonaws.com
                      x-go-type-skip-optional-pointer: true
                    partitionKeyTemplate:
                      type: string
                      description: The template for the partition key to use when sending events to Kinesis (a JMESPath template)
                      example: "data.user_id"
                      x-go-type-skip-optional-pointer: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Destination"
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: destination
    get:
      summary: List destinations
      operationId: listDestinations
      tags: ["Destination"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
      responses:
        200:
          description: List of destinations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Destination"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /projects/{projectIdOrName}/destinations/{destination}:
    get:
      summary: Get a destination
      operationId: getDestination
      tags: [ "Destination" ]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
        - name: destination
          in: path
          required: true
          schema:
            type: string
          description: The destination name.
          example: leadConvertedWebhook
        - name: includeSecrets
          in: query
          required: false
          description: Include secrets in the response
          schema:
            type: boolean
          example: true
        - name: rotate
          in: query
          required: false
          description: Rotate the destination secrets
          schema:
            type: boolean
          example: true
      responses:
        404:
          description: Destination not found
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Destination"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
    patch:
      summary: Update a destination
      operationId: updateDestination
      tags: ["Destination"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
        - name: destination
          in: path
          required: true
          schema:
            type: string
          description: The destination ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - updateMask
                - destination
              properties:
                updateMask:
                  type: array
                  items:
                    type: string
                  description: |
                    Array of field paths specifying which fields to update. Allowed values include:
                    - name
                    - metadata.url
                    - metadata.headers
                    - metadata.region
                    - metadata.streamName
                    - metadata.endpointUrl
                    - metadata.partitionKeyTemplate
                    - secrets.awsKeyId
                    - secrets.awsSecretKey
                    - secrets.awsSessionToken

                  example: ["name", "metadata.url", "metadata.region", "metadata.streamName"]
                destination:
                  type: object
                  properties:
                    name:
                      type: string
                      description: User-friendly name for the destination
                      example: leadConvertedWebhook
                    metadata:
                      type: object
                      properties:
                        url:
                          type: string
                          description: Webhook URL
                          example: https://webhooks.mailmonkey.com/salesforce-lead-converted
                        headers:
                          $ref: "#/components/schemas/WebhookHeaders"
                        region:
                          type: string
                          description: The AWS region where the kinesis destination is hosted.
                          example: us-east-1
                        streamName:
                          type: string
                          description: The name of the Kinesis stream to send events to.
                          example: my-kinesis-stream
                        endpointUrl:
                          type: string
                          description: The endpoint URL for the Kinesis stream.
                          example: https://kinesis.us-east-1.amazonaws.com
                        partitionKeyTemplate:
                          type: string
                          description: The template for the partition key to use when sending events to Kinesis (a JMESPath template)
                          example: "data.user_id"
                    secrets:
                      type: object
                      description: Secrets for the destination.
                      properties:
                        awsKeyId:
                          type: string
                          description: The AWS access key ID for the Kinesis destination.
                          example: AKIAIOSFODNN7EXAMPLE
                        awsSecretKey:
                          type: string
                          description: The AWS secret access key for the Kinesis destination.
                          example: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
                        awsSessionToken:
                          type: string
                          description: The AWS session token for the Kinesis destination.
                          example: AQoEXAMPLEH4aoAH0gNCAPy...
      responses:
        404:
          description: Destination not found
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        200:
          description: Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Destination"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: destinationUpdate
    delete:
      summary: Delete a destination
      operationId: deleteDestination
      tags: ["Destination"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
        - name: destination
          in: path
          required: true
          schema:
            type: string
          description: The destination ID
      responses:
        204:
          description: Deleted
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /generate-upload-url:
    get:
      summary: Generate a signed URL to upload a zip file to.
      operationId: generateUploadUrl
      tags: ["Upload URL"]
      responses:
        200:
          description: Signed URL
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignedUrl"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /orgs:
    post:
      x-speakeasy-ignore: true
      summary: Create a new organization
      operationId: createOrg
      tags: ["Org"]
      requestBody:
        content:
          application/json:
            schema:
              required:
                - label
              type: object
              properties:
                label:
                  type: string
                  description: The organization label.
                  example: org-123
        required: true
      responses:
        201:
          description: The newly created org
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Org"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: org
  /orgs/{orgId}:
    get:
      x-speakeasy-ignore: true
      summary: Get an organization
      operationId: getOrg
      tags: ["Org"]
      parameters:
        - name: orgId
          in: path
          required: true
          description: ID of the organization.
          schema:
            type: string
          example: 9f7c3e2a-61b8-4f5c-8d1a-eb24f3b05d79
      responses:
        200:
          description: Organization
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Org"
        404:
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
    patch:
      x-speakeasy-ignore: true
      summary: Update an organization
      operationId: updateOrg
      tags: ["Org"]
      parameters:
        - name: orgId
          in: path
          required: true
          description: ID of the organization.
          schema:
            type: string
          example: 9f7c3e2a-61b8-4f5c-8d1a-eb24f3b05d79
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - updateMask
                - org
              properties:
                updateMask:
                  type: array
                  items:
                    type: string
                  description: |
                    Array of field paths specifying which fields to update. Allowed values include:
                    - label
                  example: ["label"]
                org:
                  type: object
                  properties:
                    label:
                      type: string
                      description: The organization label.
                      example: org-123
      responses:
        200:
          description: Updated org
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Org"
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: orgUpdate
  /orgs/{orgId}/builders:
    get:
      summary: List builders for an organization
      operationId: listOrgBuilders
      tags: ["Org"]
      parameters:
        - name: orgId
          in: path
          required: true
          description: ID of the organization.
          schema:
            type: string
          example: 9f7c3e2a-61b8-4f5c-8d1a-eb24f3b05d79
      responses:
        200:
          description: List of builders that are a part of the org
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Builder"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /orgs/{orgId}/invites:
    post:
      x-speakeasy-ignore: true
      summary: Invite a user to an organization
      operationId: createOrgInvite
      tags: ["Org"]
      parameters:
        - name: orgId
          in: path
          required: true
          description: ID of the organization.
          schema:
            type: string
          example: 9f7c3e2a-61b8-4f5c-8d1a-eb24f3b05d79
      requestBody:
        content:
          application/json:
            schema:
              required:
                - email
              type: object
              properties:
                email:
                  type: string
                  description: The email address of the user to invite.
                  example: alice@company.com
      responses:
        201:
          description: The newly created invite
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invite"
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: invite
    get:
      x-speakeasy-ignore: true
      summary: List invites for an organization
      operationId: listOrgInvites
      tags: ["Org"]
      parameters:
        - name: orgId
          in: path
          required: true
          description: ID of the organization.
          schema:
            type: string
          example: 9f7c3e2a-61b8-4f5c-8d1a-eb24f3b05d79
      responses:
        200:
          description: List of invites
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Invite"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /orgs/{orgId}/invites/{inviteId}:
    get:
      x-speakeasy-ignore: true
      summary: Get an invite
      operationId: getOrgInvite
      tags: ["Org"]
      parameters:
        - name: orgId
          in: path
          required: true
          description: ID of the organization.
          schema:
            type: string
          example: 9f7c3e2a-61b8-4f5c-8d1a-eb24f3b05d79
        - name: inviteId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Invite
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invite"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
    delete:
      x-speakeasy-ignore: true
      summary: Revoke an invite
      operationId: deleteOrgInvite
      tags: ["Org"]
      parameters:
        - name: orgId
          in: path
          required: true
          description: ID of the organization.
          schema:
            type: string
          example: 9f7c3e2a-61b8-4f5c-8d1a-eb24f3b05d79
        - name: inviteId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Deleted
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /orgs/{orgId}/memberships:
    post:
      summary: Add user to an organization
      description: Adds a builder to an organization. Two authorization modes - Org owner inviting another user, or self-joining via claimed domain (authenticated user's email domain should be claimed by this organization).
      operationId: addUserToOrg
      tags: ["Org"]
      security: # Only bearer auth works for this endpoint
        - Bearer: []
      parameters:
        - name: orgId
          in: path
          required: true
          description: ID of the organization.
          schema:
            type: string
          example: 9f7c3e2a-61b8-4f5c-8d1a-eb24f3b05d79
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - builderId
              properties:
                builderId:
                  type: string
                  description: The ID of the builder to add to the organization
                  example: builder-id-123
      responses:
        201:
          description: User successfully added to organization
        400:
          description: Bad Request - Membership already exists or invalid request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        403:
          description: Forbidden - Requires org:owner permission
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
        404:
          description: Not Found - Organization or builder not found
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /my-info:
    get:
      x-speakeasy-ignore: true
      summary: Get information about the current user
      operationId: getMyInfo
      tags: ["User"]
      security: # Only bearer auth works for this endpoint
        - Bearer: []
      responses:
        200:
          description: Information about the current user and their organizations and projects
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BuilderInfo"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /invites:accept:
    post:
      x-speakeasy-ignore: true
      summary: Accept an invite
      operationId: acceptInvite
      tags: ["User"]
      security: # Only bearer auth works for this endpoint
        - Bearer: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - invitedEmail
              properties:
                invitedEmail:
                  type: string
                  description: The email address that the invite was sent to
        required: true
      responses:
        200:
          description: Information about the current user and their organizations and projects
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BuilderInfo"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /orgs/{orgId}/billingAccount:
    get:
      x-speakeasy-ignore: true
      summary: Get the billing account for an organization
      operationId: getOrgBillingAccount
      tags: ["Billing Account"]
      parameters:
        - name: orgId
          in: path
          required: true
          description: ID of the organization.
          schema:
            type: string
          example: 9f7c3e2a-61b8-4f5c-8d1a-eb24f3b05d79
      responses:
        200:
          description: Billing account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingAccount"
        404:
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /billingAccounts/{billingAccountId}/portalSession:
    post:
      x-speakeasy-ignore: true
      summary: Create a portal session for a billing account
      operationId: createBillingAccountSession
      tags: ["Billing Account"]
      parameters:
        - name: billingAccountId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - redirectUrl
              properties:
                redirectUrl:
                  type: string
                  description: The URL to redirect to once a portal session is exited.
                  example: https://dashboard.withampersand.com/the-current-page
                timeout:
                  type: integer
                  description: The number of seconds before the portal session expires.
                  example: 3600
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - url
                properties:
                  url:
                    type: string
                    description: The URL to redirect to in order to start the portal session.
                    example: https://billing.portal.com/customer/session
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /projects/{projectIdOrName}/notifications/targets:
    post:
      summary: Create a notification target
      operationId: createTarget
      tags: ["Notification"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - label
                - type
                - metadata
              properties:
                label:
                  type: string
                  description: A human-readable label for the notification target.
                  example: "Production Slack Alerts"
                type:
                  type: string
                  description: The type of notification target.
                  enum: ["webhook"]
                  example: webhook
                metadata:
                  type: object
                  properties:
                    url:
                      type: string
                      description: Webhook URL, must start with "https://".
                      example: https://webhooks.mailmonkey.com/salesforce-lead-converted
                    headers:
                      $ref: "#/components/schemas/WebhookHeaders"
                secrets:
                  type: object
                  description: Secrets for the target.
      responses:
        200:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationTarget"
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: target
    get:
      summary: List notification targets
      operationId: listTargets
      tags: ["Notification"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
      responses:
        200:
          description: List of notification targets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NotificationTarget"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /projects/{projectIdOrName}/notifications/targets/{targetId}:
    patch:
      summary: Update a notification target
      operationId: updateTarget
      tags: ["Notification"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
        - name: targetId
          in: path
          required: true
          description: The notification target ID.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - updateMask
                - target
              properties:
                updateMask:
                  type: array
                  items:
                    type: string
                  description: |
                    Array of field paths specifying which fields to update. Allowed values include:
                    - label
                    - metadata.url
                    - metadata.headers
               
                  example: ["label", "metadata.url", "metadata.headers"]
                target:
                  type: object
                  properties:
                    label:
                      type: string
                      description: A human-readable label for the notification target.
                      example: "Updated Production Alerts"
                    type:
                      type: string
                      description: The type of notification target.
                      example: webhook
                    metadata:
                      type: object
                      properties:
                        url:
                          type: string
                          description: Webhook URL, must start with "https://".
                          example: https://webhooks.mailmonkey.com/salesforce-lead-converted
                        headers:
                          $ref: "#/components/schemas/WebhookHeaders"
                    secrets:
                      type: object
                      description: Secrets for the target.
      responses:
        200:
          description: Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationTarget"
        404:
          description: Target not found
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: updateTargetRequest
    get:
      summary: Get a notification target
      operationId: getTargetById
      tags: ["Notification"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
        - name: targetId
          in: path
          required: true
          description: The notification target ID.
          schema:
            type: string
      responses:
        200:
          description: Notification target details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationTarget"
        404:
          description: Target not found
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
    delete:
      summary: Delete a notification target
      operationId: deleteTarget
      tags: ["Notification"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
        - name: targetId
          in: path
          required: true
          description: The notification target ID.
          schema:
            type: string
      responses:
        204:
          description: Deleted
        404:
          description: Target not found
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /projects/{projectIdOrName}/notifications/topics:
    post:
      summary: Create a notification topic
      description: Create a new notification topic for the project. Topics are used to categorize and organize notifications.
      operationId: createTopic
      tags: ["Notification"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - label
              properties:
                label:
                  type: string
                  description: A human-readable label for the notification topic.
                  example: "System Alerts"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationTopic"
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: topic
    get:
      summary: List notification topics
      operationId: listTopics
      tags: ["Notification"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
      responses:
        200:
          description: List of notification topics
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NotificationTopic"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /projects/{projectIdOrName}/notifications/topics/{topicId}:
    patch:
      summary: Update a notification topic
      operationId: updateTopic
      tags: ["Notification"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
        - name: topicId
          in: path
          required: true
          description: The notification topic ID.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - label
              properties:
                label:
                  type: string
                  description: A human-readable label for the notification topic.
                  example: "Updated System Alerts"
      responses:
        200:
          description: Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationTopic"
        404:
          description: Topic not found
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: updateTopicRequest
    delete:
      summary: Delete a notification topic
      operationId: deleteTopic
      tags: ["Notification"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
        - name: topicId
          in: path
          required: true
          description: The notification topic ID.
          schema:
            type: string
      responses:
        204:
          description: Deleted
        404:
          description: Topic not found
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /projects/{projectIdOrName}/notifications/event-topic-routes:
    post:
      summary: Create an event-topic route
      description: Create a new event-topic route that maps specific event types to notification topics.
      operationId: createEventTopicRoute
      tags: ["Notification"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - eventType
                - topicId
              properties:
                eventType:
                  type: string
                  description: The type of notification event.
                  enum: 
                    - "read.backfill.done"
                    - "connection.created"
                    - "installation.created"
                    - "installation.updated"
                    - "installation.deleted"
                    - "read.schedule.paused"
                topicId:
                  type: string
                  description: The ID of the notification topic to route events to.
            examples:
              route_example:
                summary: Create event-topic route
                value:
                  eventType: "installation.created"
                  topicId: "topic_1234567890abcdef"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationEventTopicRoute"
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: eventTopicRoute
    get:
      summary: List notification event-topic routes
      operationId: listEventTopicRoutes
      tags: ["Notification"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
        - name: topicId
          in: query
          required: false
          description: Filter by notification topic ID.
          schema:
            type: string
        - name: eventType
          in: query
          required: false
          description: Filter by notification event type.
          schema:
            type: string
            enum: 
              - "read.backfill.done"
              - "connection.created"
              - "installation.created"
              - "installation.updated"
              - "installation.deleted"
              - "read.schedule.paused"
      responses:
        200:
          description: List of event-topic routes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NotificationEventTopicRoute"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /projects/{projectIdOrName}/notifications/event-topic-routes/{routeId}:
    delete:
      summary: Delete a notification event-topic route
      operationId: deleteEventTopicRoute
      tags: ["Notification"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
        - name: routeId
          in: path
          required: true
          description: The event-topic route ID.
          schema:
            type: string
      responses:
        204:
          description: Deleted
        404:
          description: Route not found
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /projects/{projectIdOrName}/notifications/topic-target-routes:
    post:
      summary: Create a notification topic-target route 
      operationId: createTopicTargetRoute
      tags: ["Notification"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
          example: my-project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - topicId
                - targetId
              properties:
                topicId:
                  type: string
                  description: The ID of the notification topic.
                targetId:
                  type: string
                  description: The ID of the notification target.
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationTopicTargetRoute"
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
        422:
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
      x-codegen-request-body-name: topicTargetRoute
    get:
      summary: List notification topic-target routes
      operationId: listTopicTargetRoutes
      tags: ["Notification"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
        - name: topicId
          in: query
          required: false
          description: Filter by notification topic ID.
          schema:
            type: string
        - name: targetId
          in: query
          required: false
          description: Filter by notification target ID.
          schema:
            type: string
      responses:
        200:
          description: List of topic-target routes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NotificationTopicTargetRoute"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /projects/{projectIdOrName}/notifications/topic-target-routes/{routeId}:
    delete:
      summary: Delete a notification topic-target route
      operationId: deleteTopicTargetRoute
      tags: ["Notification"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          description: The Ampersand project ID or project name.
          schema:
            type: string
        - name: routeId
          in: path
          required: true
          description: The topic-target route ID.
          schema:
            type: string
      responses:
        204:
          description: Deleted
        404:
          description: Route not found
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /projects/{projectIdOrName}/jwt-keys:
    post:
      summary: Create a new JWT key
      description: Creates a new JWT key for the specified project with RSA public key for token verification
      operationId: createJWTKey
      tags: ["JWT Key"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
          description: Ampersand Project ID or name.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateJWTKeyRequest'
            examples:
              example1:
                summary: Valid RSA JWT key creation
                value:
                  name: "production-key-1"
                  algorithm: "RSA"
                  publicKeyPem: |
                    -----BEGIN PUBLIC KEY-----
                    MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4f5wg5l2hKsTeNem/V41
                    fGnJm6gOdrj8ym3rFkEjWT2btf2QisEgQG5WQwTfEUvUNR8JW5FQ0mKJ5I4LhXq6
                    V5gN6kSKs2cUdD8Ky7Lj7kqn6I3l3r3F2fK9MFjZ8tU5z4z4yHdF6W2C3k5vf3f
                    -----END PUBLIC KEY-----
      responses:
        '201':
          description: JWT key created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTKeyResponse'
              examples:
                example1:
                  summary: Successful key creation
                  value:
                    kid: "550e8400-e29b-41d4-a716-446655440000"
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
              examples:
                invalidAlgorithm:
                  summary: Unsupported algorithm
                  value:
                    type: "https://httpstatuses.com/400"
                    title: "Bad Request"
                    status: 400
                    detail: "unsupported algorithm"
                    validationIssues:
                      - field: "algorithm"
                        value: "ECDSA"
                        detail: "only RSA algorithm is supported"
                        remedy: "use 'RSA' as the algorithm"
                invalidPublicKey:
                  summary: Invalid public key format
                  value:
                    type: "https://httpstatuses.com/400"
                    title: "Bad Request"
                    status: 400
                    detail: "invalid public key"
                    validationIssues:
                      - field: "publicKeyPem"
                        detail: "invalid RSA public key in PEM format"
                        remedy: "provide a valid RSA public key in PEM format"
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
              examples:
                projectNotFound:
                  summary: Project does not exist
                  value:
                    type: "https://httpstatuses.com/404"
                    title: "Not Found"
                    status: 404
                    detail: "project not found"
                    validationIssues:
                      - field: "projectId"
                        detail: "project not found"
                        remedy: "check the project ID and try again"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
    get:
      summary: List JWT keys
      description: Retrieves all JWT keys for the specified project, with optional filtering for active keys only
      operationId: listJWTKeys
      tags: ["JWT Key"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
          description: Ampersand Project ID or name.
        - name: active
          in: query
          description: Filter to only return active JWT keys
          required: false
          schema:
            type: boolean
            default: false
          example: true
      responses:
        '200':
          description: List of JWT keys retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JWTKey'
              examples:
                example1:
                  summary: Multiple JWT keys
                  value:
                    - id: "550e8400-e29b-41d4-a716-446655440000"
                      projectId: "123e4567-e89b-12d3-a456-426614174000"
                      label: "production-key-1"
                      algorithm: "RSA"
                      publicKeyPem: |
                        -----BEGIN PUBLIC KEY-----
                        MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4f5wg5l2hKsTeNem/V41
                        -----END PUBLIC KEY-----
                      active: true
                      createTime: "2024-01-15T10:30:00Z"
                      updateTime: "2024-01-15T10:30:00Z"
                    - id: "550e8400-e29b-41d4-a716-446655440001"
                      projectId: "123e4567-e89b-12d3-a456-426614174000"
                      label: "development-key-1"
                      algorithm: "RSA"
                      publicKeyPem: |
                        -----BEGIN PUBLIC KEY-----
                        MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5g6xh6m3iLtUfOqn/W52
                        -----END PUBLIC KEY-----
                      active: false
                      createTime: "2024-01-10T08:15:00Z"
                      updateTime: "2024-01-12T14:20:00Z"
                emptyList:
                  summary: No JWT keys found
                  value: []
        '400':
          description: Bad request - invalid project ID
          content:
            application/json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
  /projects/{projectIdOrName}/jwt-keys/{keyId}:
    get:
      summary: Get a specific JWT key
      description: Retrieves a specific JWT key by its ID within the specified project
      operationId: getJWTKey
      tags: ["JWT Key"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
          description: Ampersand Project ID or name.
        - name: keyId
          in: path
          required: true
          schema:
            type: string
          description: The JWT key ID.
      responses:
        '200':
          description: JWT key retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTKey'
              examples:
                example1:
                  summary: Single JWT key details
                  value:
                    id: "550e8400-e29b-41d4-a716-446655440000"
                    projectId: "123e4567-e89b-12d3-a456-426614174000"
                    label: "production-key-1"
                    algorithm: "RSA"
                    publicKeyPem: |
                      -----BEGIN PUBLIC KEY-----
                      MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4f5wg5l2hKsTeNem/V41
                      -----END PUBLIC KEY-----
                    active: true
                    createTime: "2024-01-15T10:30:00Z"
                    updateTime: "2024-01-15T10:30:00Z"
        '404':
          description: JWT key not found
          content:
            application/json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
              examples:
                keyNotFound:
                  summary: Key does not exist
                  value:
                    type: "https://httpstatuses.com/404"
                    title: "Not Found"
                    status: 404
                    detail: "JWT key not found"
                    remedy: "check the key ID and project ID are both correct, and try again"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
    patch:
      summary: Update a JWT key
      description: Updates specific fields of a JWT key using field masks. Currently supports updating the 'active' status and 'name' field.
      operationId: updateJWTKey
      tags: ["JWT Key"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
          description: Ampersand Project ID or name.
        - name: keyId
          in: path
          required: true
          schema:
            type: string
          description: The JWT key ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchJWTKeyRequest'
            examples:
              deactivateKey:
                summary: Deactivate a JWT key
                value:
                  updateMask: ["active"]
                  jwtKey:
                    active: false
              renameKey:
                summary: Rename a JWT key
                value:
                  updateMask: ["name"]
                  jwtKey:
                    name: "updated-key-name"
              updateMultiple:
                summary: Update both name and active status
                value:
                  updateMask: ["active", "name"]
                  jwtKey:
                    active: false
                    name: "deprecated-key"
      responses:
        '200':
          description: JWT key updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTKey'
              examples:
                example1:
                  summary: Updated JWT key
                  value:
                    id: "550e8400-e29b-41d4-a716-446655440000"
                    projectId: "123e4567-e89b-12d3-a456-426614174000"
                    label: "updated-key-name"
                    algorithm: "RSA"
                    publicKeyPem: |
                      -----BEGIN PUBLIC KEY-----
                      MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4f5wg5l2hKsTeNem/V41
                      -----END PUBLIC KEY-----
                    active: false
                    createTime: "2024-01-15T10:30:00Z"
                    updateTime: "2024-01-16T15:45:00Z"
        '400':
          description: Bad request - invalid update mask or missing project/key ID
          content:
            application/json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
              examples:
                invalidMask:
                  summary: Invalid update mask
                  value:
                    type: "https://httpstatuses.com/400"
                    title: "Bad Request"
                    status: 400
                    detail: "Invalid update mask"
                    remedy: "Allowed masks: 'active' and 'name'"
        '404':
          description: JWT key not found
          content:
            application/json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
        '422':
          description: Unprocessable entity - value not found for mask
          content:
            application/json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
              examples:
                missingValue:
                  summary: Missing value for update mask
                  value:
                    type: "https://httpstatuses.com/422"
                    title: "Unprocessable Entity"
                    status: 422
                    detail: "value not found for mask"
                    validationIssues:
                      - field: "jwtKey"
                        detail: "required field missing for specified mask"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
    delete:
      summary: Delete a JWT key
      description: Permanently deletes a JWT key from the specified project
      operationId: deleteJWTKey
      tags: ["JWT Key"]
      parameters:
        - name: projectIdOrName
          in: path
          required: true
          schema:
            type: string
          description: Ampersand Project ID or name.
        - name: keyId
          in: path
          required: true
          schema:
            type: string
          description: The JWT key ID.
      responses:
        '204':
          description: JWT key deleted successfully (no content)
        '404':
          description: JWT key not found
          content:
            application/json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
              examples:
                keyNotFound:
                  summary: Key does not exist
                  value:
                    type: "https://httpstatuses.com/404"
                    title: "Not Found"
                    status: 404
                    detail: "JWT key not found"
                    remedy: "check the key ID and project ID are both correct, and try again"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"

  /claimed-domains:
    get:
      operationId: checkClaimedDomain
      summary: Check if a domain is claimed
      description: Returns claimed domain information if authenticated user is an owner of the organization that claimed the domain, or if the user's email domain matches the claimed domain.
      tags: ["Org"]
      x-excluded: true
      security: # Only bearer auth works for this endpoint
        - Bearer: []
      parameters:
        - name: domain
          in: query
          required: true
          description: >
            Accepts an email address, domain name, or URL. The domain will be automatically extracted:
            for emails, the portion after @ is used (e.g., "user@example.com" becomes "example.com");
            for URLs, the hostname is extracted (e.g., "https://www.example.com" becomes "example.com").
          schema:
            type: string
          example: xyz@withampersand.com
      responses:
        200:
          description: Domain claim status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClaimedDomainResponse"
        400:
          description: Bad Request - Invalid input
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        404:
          description: Domain not claimed
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
    post:
      operationId: claimDomain
      summary: Claim a domain
      description: Claim a domain for an organization. Accepts email, domain, or URL.
      tags: ["Org"]
      x-excluded: true
      security: # Only bearer auth works for this endpoint
        - Bearer: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - domain
                - parentId
                - parentType
              properties:
                domain:
                  type: string
                  description: >
                    Accepts an email address, domain name, or URL. The domain will be automatically extracted:
                    for emails, the portion after @ is used (e.g., "user@example.com" becomes "example.com");
                    for URLs, the hostname is extracted (e.g., "https://www.example.com" becomes "example.com").
                  example: xyz@withampersand.com
                parentId:
                  type: string
                  description: ID of the parent entity claiming the domain
                  example: orgId
                parentType:
                  type: string
                  description: Type of the parent entity
                  example: org
        required: true
      responses:
        201:
          description: Domain claimed successfully
        400:
          description: Bad Request - Invalid input
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/InputValidationProblem"
        409:
          description: Domain already claimed by another organization
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"

  /orgs/{orgId}/claimed-domains:
    get:
      operationId: listOrgClaimedDomains
      summary: List organization's claimed domains
      description: Get all domains claimed by a specific organization
      tags: ["Org"]
      x-excluded: true
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
          description: Organization ID
          example: orgId
      responses:
        200:
          description: List of claimed domains for the organization
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ClaimedDomainResponse"
        404:
          description: Organization not found
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: "../problem/problem.yaml#/components/schemas/ApiProblem"

## Schema Components ##
components:
  schemas:
    Org:
      title: Organization
      required:
        - id
        - label
        - createTime
        - defaultTeamId
      type: object
      properties:
        id:
          type: string
          description: The organization ID.
          example: 9f7c3e2a-61b8-4f5c-8d1a-eb24f3b05d79
        label:
          type: string
          description: The organization label.
          example: Acme Inc
        defaultTeamId:
          type: string
          description: The ID of the Everyone team for the org.
        createTime:
          type: string
          description: The time the organization was created.
          format: date-time
        updateTime:
          type: string
          description: The time the organization was updated.
          format: date-time
    Destination:
      title: Destination
      required:
        - id
        - name
        - type
        - metadata
        - createTime
      type: object
      properties:
        id:
          type: string
          description: The destination ID.
        name:
          type: string
          description: User-defined name for the destination
          example: leadConvertedWebhook
        type:
          type: string
          description: The type of the destination
          example: webhook
        metadata:
          type: object
          properties:
            url:
              type: string
              description: Webhook URL
              example: https://webhooks.mailmonkey.com/salesforce-lead-converted
            headers:
              $ref: "#/components/schemas/WebhookHeaders"
            streamName:
              type: string
              description: The name of the Kinesis stream
              example: my-data-stream
            region:
              type: string
              description: The AWS region for the destination
              example: us-east-1
            partitionKeyTemplate:
              type: string
              description: Template for generating partition keys
              example: "{{.integration_id}}"
        createTime:
          type: string
          description: The time the destination was created.
          format: date-time
        updateTime:
          type: string
          description: The time the destination was updated.
          format: date-time
        secrets:
          type: object
          description: Destination secrets (only included when includeSecrets is true)
          properties:
            webhookSigningKey:
              type: string
              description: Webhook signing key for the destination (only included for webhook destinations)
    Project:
      title: Project
      required:
        - appName
        - createTime
        - id
        - name
      # TODO(ENG-1029): once all projects have been backfilled with org ID, add orgId to required list
      type: object
      properties:
        id:
          type: string
          description: The project ID.
          example: my-project
        name:
          type: string
          description: The project name.
          example: mailmonkey-staging
        appName:
          type: string
          description: The name of the application, which is displayed to end users.
          example: MailMonkey
        orgId:
          type: string
          description: The organization ID that this project belongs to.
          example: 9f7c3e2a-61b8-4f5c-8d1a-eb24f3b05d79
        createTime:
          type: string
          description: The time the project was created.
          format: date-time
        updateTime:
          type: string
          description: The time the project was updated.
          format: date-time
        entitlements:
          type: object
          description: The entitlements for the project.
          properties:
            brandingRemoval:
              type: object
              required:
                - value
              x-go-type-skip-optional-pointer: true
              description: Whether branding can be removed from the UI library.
              properties:
                value:
                  type: boolean
                  description: Whether branding has been removed from the project.
    ProviderApp:
      title: Provider App
      required:
        - clientId
        - createTime
        - id
        - projectId
        - provider
      type: object
      properties:
        id:
          type: string
          description: The provider app ID.
          example: provider-app-123
        projectId:
          type: string
          description: The Ampersand project ID.
          example: project-456
        externalRef:
          type: string
          description: The ID used by the provider to identify the app (optional).
          example: external-id-123
        provider:
          type: string
          description: The SaaS provider that this app connects to.
          example: salesforce
        clientId:
          type: string
          description: The OAuth client ID for this app.
          example: client-id-123
        scopes:
          type: array
          description: The OAuth scopes for this app.
          items:
            type: string
            example:
              - oauth
              - offline
              - crm.read
        createTime:
          type: string
          description: The time the provider app was created.
          format: date-time
        updateTime:
          type: string
          description: The time the provider app was updated.
          format: date-time
    Integration:
      title: Integration
      required:
        - createTime
        - id
        - latestRevision
        - name
        - projectId
        - provider
      type: object
      properties:
        id:
          type: string
          description: The integration ID.
        projectId:
          type: string
          description: The Ampersand project ID.
          example: project-456
        name:
          type: string
          description: The integration name.
          example: read-accounts
        provider:
          type: string
          description: The SaaS provider that this integration connects to.
          example: salesforce
        createTime:
          type: string
          description: The time the integration was created.
          format: date-time
        updateTime:
          type: string
          description: The time the integration was last updated.
          format: date-time
        latestRevision:
          $ref: "#/components/schemas/Revision"
    Revision:
      title: Revision
      required:
        - content
        - createTime
        - id
        - specVersion
      type: object
      properties:
        id:
          type: string
          description: The revision ID.
          example: revision-id-1
        specVersion:
          type: string
          description: The spec version string.
          example: 1.0.0
        createTime:
          type: string
          description: The time the revision was created.
          format: date-time
        content:
          $ref: "../manifest/manifest.yaml#/components/schemas/Integration"
    HydratedRevision:
      title: Hydrated Revision
      required:
        - content
        - createTime
        - id
        - specVersion
      type: object
      properties:
        id:
          type: string
          description: The revision ID.
          example: revision-id-1
        specVersion:
          type: string
          description: The spec version string.
          example: 1.0.0
        createTime:
          type: string
          description: The time the revision was created.
          format: date-time
        content:
          $ref: "../manifest/manifest.yaml#/components/schemas/HydratedIntegration"
    Installation:
      title: Installation
      required:
        - config
        - connection
        - createTime
        - createdBy
        - healthStatus
        - id
        - integrationId
        - projectId
      type: object
      properties:
        id:
          type: string
          description: The installation ID.
        projectId:
          type: string
          description: The Ampersand project ID.
          example: project-456
        integrationId:
          type: string
          description: The integration ID.
        group:
          $ref: "#/components/schemas/Group"
        healthStatus:
          type: string
          description: The health status of the installation ("healthy", "unhealthy").
          example: healthy
        connection:
          $ref: "#/components/schemas/Connection"
        createTime:
          type: string
          description: The time the integration was first installed.
          format: date-time
        createdBy:
          type: string
          description: The person who did the installation, in the format of "consumer:{consumer-id}".
          example: consumer:consumer-123
        updateTime:
          type: string
          description: The time the installation was last updated with a new config.
          format: date-time
        config:
          $ref: "#/components/schemas/Config"
    Config:
      title: Config
      required:
        - content
        - createTime
        - createdBy
        - id
        - revisionId
      type: object
      properties:
        id:
          type: string
          description: The config ID.
          example: config-123
        revisionId:
          type: string
          description: The ID of the revision that this config is based on.
          example: revision-123
        createTime:
          type: string
          description: The time the config was created.
          format: date-time
        createdBy:
          type: string
          description:
            The person who created the config, in the format of "consumer:{consumer-id}"
            or "builder:{builder-id}".
          example: builder:builder-123
        content:
          $ref: "../config/config.yaml#/components/schemas/ConfigContent"
    Connection:
      title: Connection
      required:
        - id
        - createTime
        - group
        - consumer
        - projectId
        - provider
        - authScheme
        - status
      type: object
      properties:
        id:
          type: string
          description: The connection ID.
          example: connection-123
        projectId:
          type: string
          description: The Ampersand project ID.
          example: project-456
        provider:
          type: string
          description: The SaaS provider that this Connection is for.
          example: salesforce
        providerApp:
          $ref: "#/components/schemas/ProviderApp"
        group:
          $ref: "#/components/schemas/Group"
        consumer:
          $ref: "#/components/schemas/Consumer"
        providerWorkspaceRef:
          type: string
          description: If available, the identifier for the provider workspace (e.g. the Salesforce subdomain)
          example: provider-workspace-123
        providerConsumerRef:
          type: string
          description:
            If available, the ID that Salesforce/Hubspot uses to identify this user (e.g.
            Salesforce has IDs in the form of https://login.salesforce.com/id/00D4x0000019CQTEA2/0054x000000orJ4AA)
          example: provider-consumer-123
        createTime:
          type: string
          description: The time the connection was created.
          format: date-time
          example: 2023-07-13T21:34:44.816354Z
        updateTime:
          type: string
          description: The time the connection was last updated.
          format: date-time
          example: 2023-07-13T21:34:44.816354Z
        authScheme:
          type: string
          description: The authentication scheme used for this connection.
          example: oauth2/authorizationCode
          enum:
            [
              none,
              apiKey,
              basic,
              oauth2/authorizationCode,
              oauth2/authorizationCodePKCE,
              oauth2/clientCredentials,
              oauth2/password,
            ]
        status:
          type: string
          description: |
            The status of the connection.
            - `created`: The connection has just been created or the access token was just refreshed.
            - `working`: The connection has successfully been used to make a request.
            - `bad_credentials`: The connection encountered credential-related issues when making a request, or when attempting to refresh the access token.
          example: working
          enum: [created, working, bad_credentials]
        oauth2AuthorizationCode:
          $ref: "#/components/schemas/Oauth2AuthorizationCodeTokensOnly"
        apiKey:
          type: string
          description: The API key used while making the connection.
          example: api-key-123
        providerMetadata:
          $ref: "#/components/schemas/ProviderMetadata"
    Oauth2AuthorizationCodeTokensOnly:
      title: OAuth2 AuthorizationCode Token
      type: object
      properties:
        accessToken:
          type: object
          required:
            - token
          description: The access token for the connection.
          properties:
            token:
              type: string
            issuedAt:
              type: string
              format: date-time
              example: "2024-04-22T18:55:28.456076Z"
            expiresAt:
              type: string
              format: date-time
              example: "2024-10-22T18:55:28.456076Z"
        refreshToken:
          type: object
          required:
            - token
          description: The refresh token to use for the connection.
          properties:
            token:
              type: string
            issuedAt:
              type: string
              format: date-time
              example: "2024-04-22T18:55:28.456076Z"
            expiresAt:
              type: string
              format: date-time
              example: "2024-10-22T18:55:28.456076Z"
        scopes:
          type: array
          items:
            type: string
          description: The scopes for the tokens.
    Oauth2AuthorizationCode:
      title: OAuth2 Authorization Code
      type: object
      properties:
        accessToken:
          type: object
          required:
            - token
          description: The access token for the connection.
          properties:
            token:
              type: string
            expiresAt:
              type: string
              format: date-time
            issuedAt:
              type: string
              format: date-time
        refreshToken:
          type: object
          required:
            - token
          description: The refresh token to use for the connection.
          properties:
            token:
              type: string
            expiresAt:
              type: string
              format: date-time
            issuedAt:
              type: string
              format: date-time
        scopes:
          type: array
          items:
            type: string
          description: The scopes for the tokens.
    UpdateConnectionRequest:
      title: Update Connection Request
      type: object
      required:
        - updateMask
        - connection
      properties:
        updateMask:
          type: array
          items:
            type: string
          description: |
            Array of field paths specifying which fields to update. Allowed values include:
            - providerWorkspaceRef
            - providerMetadata
            - apiKey
            - basicAuth
            - oauth2ClientCredentials
            - oauth2PasswordCredentials
          example: ["providerWorkspaceRef", "providerMetadata"]
        connection:
          $ref: "#/components/schemas/ConnectionRequest"
    ConnectionRequest:
      title: Connection Request Body
      type: object
      properties:
        providerWorkspaceRef:
          type: string
          description: The ID of the provider workspace that this connection belongs to.
        providerMetadata:
          $ref: "#/components/schemas/ProviderMetadata"
        groupName:
          type: string
          description: The name of the user group that has access to this installation.
        groupRef:
          type: string
          description: The ID of the user group that has access to this installation.
          example: group-123
        consumerName:
          type: string
          description: The name of the consumer that has access to this installation.
        consumerRef:
          type: string
          description: The consumer reference.
        provider:
          type: string
          description: The provider name (e.g. "salesforce", "hubspot")
        apiKey:
          type: string
          description: The API key to use for the connection.
        customAuth:
          type: object
          description: Values used for custom auth input variables.
          additionalProperties:
            type: string
            nullable: false
          example:
            apiKey: "abcd1234"
            password: "secret"
        basicAuth:
          type: object
          required:
            - username
            - password
          properties:
            username:
              type: string
              description: The username to use for the connection.
            password:
              type: string
              description: The password to use for the connection.
        oauth2ClientCredentials:
          type: object
          required:
            - clientId
            - clientSecret
          properties:
            clientId:
              type: string
              description: The client ID to use for the connection.
            clientSecret:
              type: string
              description: The client secret to use for the connection.
            scopes:
              type: array
              items:
                type: string
              description: The scopes for the tokens.
        oauth2PasswordCredentials:
          type: object
          required:
            - username
            - password
            - clientId
            - clientSecret
          properties:
            username:
              type: string
              description: The username to use for the connection.
            password:
              type: string
              description: The password to use for the connection.
            clientId:
              type: string
              description: The client ID to use for the connection.
            clientSecret:
              type: string
              description: The client secret to use for the connection.
            scopes:
              type: array
              items:
                type: string
              description: The scopes for the tokens.
        oauth2AuthorizationCode:
          $ref: "#/components/schemas/Oauth2AuthorizationCode"
    GenerateConnectionRequest:
      title: Generate Connection Request
      allOf:
        - $ref: '#/components/schemas/ConnectionRequest'
        - type: object
          required:
            - groupRef
            - consumerRef
            - provider

    Group:
      title: Group
      required:
        - createTime
        - groupName
        - groupRef
        - projectId
      type: object
      properties:
        groupRef:
          type: string
          description: The ID of the user group that has access to this installation.
          example: group-123
        groupName:
          type: string
          description: The name of the user group that has access to this installation.
          example: Super Customer
        projectId:
          type: string
          description: The Ampersand project ID.
          example: project-456
        createTime:
          type: string
          description: The time the group was created.
          format: date-time
          example: 2023-07-13T21:34:44.816354Z
        updateTime:
          type: string
          description: The time the group was last updated.
          format: date-time
          example: 2023-07-13T21:34:44.816354Z
    Consumer:
      title: Consumer
      required:
        - consumerName
        - consumerRef
        - createTime
        - projectId
      type: object
      properties:
        consumerRef:
          type: string
          description: The consumer reference.
          example: consumer-123
        consumerName:
          type: string
          description: The name of the consumer.
          example: Super Customer
        projectId:
          type: string
          description: The Ampersand project ID.
          example: project-456
        createTime:
          type: string
          description: The time the consumer was created.
          format: date-time
          example: 2023-07-13T21:34:44.816354Z
        updateTime:
          type: string
          description: The time the consumer was last updated.
          format: date-time
          example: 2023-07-13T21:34:44.816354Z
    Operation:
      title: Operation
      required:
        - projectId
        - integrationId
        - installationId
        - configId
        - actionType
        - status
        - id
      type: object
      properties:
        projectId:
          type: string
          description: The Ampersand project ID.
          example: project-456
        integrationId:
          type: string
          description: The integration ID.
        configId:
          type: string
          description: The config ID.
          example: config-123
        actionType:
          type: string
          description: The action type to perform for the given object.
          example: read
        id:
          type: string
          description: The operation ID.
        installationId:
          type: string
          description: The Ampersand installation ID.
        status:
          type: string
          description: The status of the operation.
          example: success
        result:
          type: string
          description: The result of the operation.
          example: "[object] No changes"
        metadata:
          type: object
          description: Metadata associated with the operation.
          example: {}
        createTime:
          type: string
          description: The time the operation was created.
          format: date-time
          example: 2023-07-13T21:34:44.816354Z
    Log:
      title: Log
      type: object
      required:
        - timestamp
        - severity
        - message
      properties:
        timestamp:
          type: string
          description: The time the log was created.
          example: 2023-07-13T21:34:44.816354Z
        message:
          type: object
          description: The log message object.
          required:
            - msg
          properties:
            msg:
              type: string
              description: The use-readable message.
              example: "This is a log message"
            error:
              type: string
              description: The error message, if there has been an error.
            operation_id:
              type: string
              description: The operation ID.
            details:
              type: object
              description: The details of the log.
              additionalProperties:
                type: string
              example:
                "request": "GET /api/v1/users"
          additionalProperties: true
        severity:
          type: string
          description: The severity of the log.
          example: DEBUG
    SignedUrl:
      title: Signed URL
      type: object
      required:
        - url
        - bucket
        - path
      properties:
        url:
          type: string
          description: The signed URL to upload the zip file to.
        bucket:
          type: string
          description: The bucket (will match the bucket part of the url).
        path:
          type: string
          description: The path (will match the path part of the url).
    ApiKeyScopes:
      title: API Key Scopes
      type: array
      description: The scopes for the API key.
      items:
        type: string
        example:
          - full
          - frontend
    ApiKeyRequest:
      title: API Key Request
      type: object
      required:
        - label
      properties:
        label:
          type: string
          description: A short name for the API key.
          example: MailMonkey API Key
        scopes:
          $ref: "#/components/schemas/ApiKeyScopes"
    ApiKey:
      title: API Key
      type: object
      required:
        - key
        - projectId
        - label
        - scopes
      properties:
        key:
          type: string
          description: The API key.
          example: api-key-123
        label:
          type: string
          description: A short name for the API key.
          example: MailMonkey API Key
        scopes:
          $ref: "#/components/schemas/ApiKeyScopes"
        projectId:
          type: string
          description: The project ID.
          example: my-project
        active:
          type: boolean
          description: Whether the API key is active.
          example: true
    PatchApiKeyRequest:
      title: Patch API Key Request
      type: object
      required:
        - updateMask
        - apiKey
      properties:
        updateMask:
          type: array
          items:
            type: string
          description: |
            Array of field paths specifying which fields to update. Allowed values include:
            - active
            - label
            - scopes
          example: ["active", "label"]
        apiKey:
          type: object
          properties:
            label:
              type: string
              description: A short name for the API key.
              example: MailMonkey API Key
            active:
              type: boolean
              description: Whether the API key is active.
              example: true
            scopes:
              $ref: "#/components/schemas/ApiKeyScopes"
    WebhookHeaders:
      title: Webhook Headers
      type: object
      nullable: true
      description: Additional headers to add when Ampersand sends a webhook message
      additionalProperties:
        type: string
        nullable: false
      example:
        Authorization: "Bearer 1234"
    Invite:
      title: Invite
      type: object
      required:
        - id
        - invitedEmail
        - createTime
        - parentId
        - parentType
        - status
      properties:
        id:
          type: string
          description: The invite ID.
        invitedEmail:
          type: string
          description: The email address of the person invited.
        parentType:
          type: string
          enum: [org]
          description: The type of entity that the person is invited to.
        parentId:
          type: string
          description: The ID of the parent (e.g. org ID).
        status:
          type: string
          description: The status of the invite.
          enum: [pending, accepted, revoked, expired]
        createTime:
          type: string
          description: The time the invite was created.
          format: date-time
        updateTime:
          type: string
          description: The time the invite was updated.
          format: date-time
    Builder:
      title: Builder
      type: object
      required:
        - id
        - idpProvider
        - idpRef
        - createTime
      properties:
        id:
          type: string
          description: The builder ID.
          example: builder-id-123
        idpProvider:
          type: string
          description: The identity provider
          example: clerk
        idpRef:
          type: string
          description: ID used by the identity provider
        createTime:
          type: string
          description: The time that the builder joined Ampersand.
          format: date-time
        firstName:
          type: string
        lastName:
          type: string
        fullName:
          type: string
        primaryEmail:
          type: string
    BillingAccount:
      title: Billing Account
      type: object
      required:
        - id
        - displayName
        - billingProvider
        - billingProviderRef
      properties:
        id:
          type: string
          description: The billing account ID.
          example: billing-account-123
        displayName:
          type: string
          description: The display name of the billing account.
          example: Acme Inc
        billingProvider:
          type: string
          description: The billing provider that this account is associated with.
          example: stripe
        billingProviderRef:
          type: string
          description: The ID used by the billing provider to identify the account.
          example: acct_1J2k3l4m5n6o7p8q9r0s
        createTime:
          type: string
          description: The time the billing account was created.
          format: date-time
        updateTime:
          type: string
          description: The time the billing account was last updated.
          format: date-time
    BuilderInfo:
      title: Builder Info
      type: object
      required:
        - builder
        - projectRoles
      properties:
        builder:
          $ref: "#/components/schemas/Builder"
        projectRoles:
          type: object
          description: A map of project IDs to project roles for the builder.
          additionalProperties:
            type: object
            required:
              - role
              - principalType
              - principalId
              - project
            properties:
              role:
                type: string
                description: The role of the builder in the project.
                example: admin
              principalType:
                type: string
                description: The type of the principal.
                enum:
                  - team
                  - builder
              principalId:
                type: string
                description: The ID of the team or builder.
                example: builder-id-123
              project:
                $ref: "#/components/schemas/Project"
        orgRole:
          type: object
          required:
            - role
            - principalType
            - principalId
            - org
          properties:
            role:
              type: string
              description: The role of the builder in the org.
              example: admin
            principalType:
              type: string
              description: The type of the principal.
              enum:
                - team
                - builder
            principalId:
              type: string
              description: The ID of the team or builder.
              example: builder-id-123
            org:
              $ref: "#/components/schemas/Org"
            # This schema actually isn't used in the manifest but it is used by the GetObjectMetadata endpoint
    ObjectMetadata:
      title: Object Metadata
      type: object
      required:
        - name
        - fields
      properties:
        name:
          type: string
          description: The provider name of the object
          example: "contact"
        displayName:
          type: string
          description: Human-readable name of the object
          example: "Contact"
        mappedObjectName:
          type: string
          example: "people"
        fields:
          type: object
          description: Map of field metadata keyed by field name
          additionalProperties:
            $ref: "../manifest/manifest.yaml#/components/schemas/FieldMetadata"
    ProviderMetadata:
      title: Provider Metadata
      type: object
      additionalProperties:
        $ref: "#/components/schemas/ProviderMetadataInfo"
    ProviderMetadataInfo:
      title: Provider Metadata Info
      type: object
      required:
        - value
        - source
      properties:
        value:
          type: string
          description: The value of the metadata field
          example: "1234567890"
        source:
          type: string
          description: The source of the metadata field
          enum: [input, token, provider]
          example: "input"
        displayName:
          type: string
          description: The human-readable name for the field
          example: "Account ID"
    PaginationInfo:
      title: Pagination Information
      type: object
      required:
        - done
      properties:
        done:
          type: boolean
          description: If set to true, this is the last page of results for the given operation. There are no more results & there will be no nextPageToken sent when done is true.
          example: false
        nextPageToken:
          type: string
          description: If present, set this value against your 'pageToken' query parameter in the next API call, which will retrieve the next set of results.
          example: Q9JT+2qfys28V4ODN+UayA==
    UpdateMask:
      type: array
      items:
        type: string
      description: |
        Array of field paths specifying which fields to update.
        Uses dot notation for nested fields (e.g., "config.revision", "metadata.tags").

        **Field Path Rules:**
        - Use dot notation for nested objects: `parent.child.field`
        - Escape special characters: `field\.with\.dots`, `field\:with\:colons`
        - Array elements not directly addressable
        - Object names can be specified directly (e.g., "config.content.read.objects.contacts")
        - The * operator in paths like "config.content.read.objects.*" allows you to specify any object name
          - Example: "config.content.read.objects.*" pattern allows "config.content.read.objects.contacts", "config.content.read.objects.leads", etc.

      example: ["name", "config.content.read.objects.contacts", "config.content.write.objects.leads"]
    CreateJWTKeyRequest:
      type: object
      required:
        - label
        - algorithm
        - publicKeyPem
      properties:
        label:
          type: string
          description: Human-readable label for the JWT key
          minLength: 1
          maxLength: 255
          example: "production-key-1"
        algorithm:
          type: string
          description: The cryptographic JWT signing algorithm (currently only RS256 is supported)
          enum: ["RS256"]
          example: "RS256"
        publicKeyPem:
          type: string
          description: RSA public key in PEM format for JWT signature verification
          format: pem
          example: |
            -----BEGIN PUBLIC KEY-----
            MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4f5wg5l2hKsTeNem/V41
            fGnJm6gOdrj8ym3rFkEjWT2btf2QisEgQG5WQwTfEUvUNR8JW5FQ0mKJ5I4LhXq6
            V5gN6kSKs2cUdD8Ky7Lj7kqn6I3l3r3F2fK9MFjZ8tU5z4z4yHdF6W2C3k5vf3f
            -----END PUBLIC KEY-----
    JWTKeyResponse:
      type: object
      required:
        - kid
      properties:
        kid:
          type: string
          format: uuid
          description: The unique key identifier (key ID) for the created JWT key
          example: "550e8400-e29b-41d4-a716-446655440000"
    JWTKey:
      type: object
      required:
        - id
        - projectId
        - label
        - algorithm
        - publicKeyPem
        - active
        - createTime
        - updateTime
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the JWT key
          example: "550e8400-e29b-41d4-a716-446655440000"
        projectId:
          type: string
          format: uuid
          description: The project this JWT key belongs to
          example: "123e4567-e89b-12d3-a456-426614174000"
        label:
          type: string
          description: Human-readable name for the JWT key
          example: "production-key-1"
        algorithm:
          type: string
          description: The cryptographic algorithm used
          enum: ["RSA"]
          example: "RSA"
        publicKeyPem:
          type: string
          description: RSA public key in PEM format
          format: pem
          example: |
            -----BEGIN PUBLIC KEY-----
            MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4f5wg5l2hKsTeNem/V41
            -----END PUBLIC KEY-----
        active:
          type: boolean
          description: Whether the JWT key is currently active and can be used for verification
          example: true
        createTime:
          type: string
          format: date-time
          description: Timestamp when the JWT key was created
          example: "2024-01-15T10:30:00Z"
        updateTime:
          type: string
          format: date-time
          description: Timestamp when the JWT key was last updated
          example: "2024-01-15T10:30:00Z"
    PatchJWTKeyRequest:
      type: object
      required:
        - updateMask
        - jwtKey
      properties:
        updateMask:
          type: array
          description: List of field paths to update (currently supports 'active' and 'name')
          items:
            type: string
            enum: ["active", "label"]
          minItems: 1
          example: ["active", "label"]
        jwtKey:
          type: object
          description: Object containing the fields to update with their new values
          additionalProperties: true
          properties:
            active:
              type: boolean
              description: New active status for the JWT key
              example: false
            label:
              type: string
              description: New label for the JWT key
              example: "updated-key-name"
          example:
            active: false
            name: "updated-key-name"

    # Metadata schemas matching Go structs in shared/common/metadata.go
    UpsertMetadataRequest:
      type: object
      description: Request payload for upserting metadata (fields only)
      properties:
        fields:
          type: object
          description: Maps object names to field definitions
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/FieldDefinition'
      required:
        - fields

    UpsertMetadataResponse:
      type: object
      description: Response containing results for all created/updated fields
      properties:
        success:
          type: boolean
          description: Indicates if the upsert operation was successful
        fields:
          type: object
          description: Maps object name -> field name -> upsert result
          additionalProperties:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/FieldUpsertResult'
      required:
        - success
        - fields

    FieldDefinition:
      type: object
      description: Field definition for creating or updating custom fields
      properties:
        fieldName:
          type: string
          description: The identifier of the field
          example: "My_Custom_Field"
        displayName:
          type: string
          description: The human-readable name of the field
          example: "My Custom Field"
        description:
          type: string
          description: Optional description of the field
        valueType:
          type: string
          description: The data type of the field. Valid values are string, boolean, date, datetime, singleSelect, multiSelect, int, float
          example: "string"
        required:
          type: boolean
          description: Indicates if the field is required
        unique:
          type: boolean
          description: Indicates if the field must be unique across all records
        indexed:
          type: boolean
          description: Indicates if the field should be indexed for faster search
        stringOptions:
          $ref: '#/components/schemas/StringFieldOptions'
        numericOptions:
          $ref: '#/components/schemas/NumericFieldOptions'
        association:
          $ref: '#/components/schemas/AssociationDefinition'
      required:
        - fieldName
        - displayName
        - valueType

    StringFieldOptions:
      type: object
      description: Additional options for string fields
      properties:
        length:
          type: integer
          description: Maximum length of the string field
        pattern:
          type: string
          description: Regex pattern that the string field value must match
        values:
          type: array
          description: List of allowed values for enum fields
          items:
            type: string
        valuesRestricted:
          type: boolean
          description: Indicates if the field value must be limited to what's in Values
        defaultValue:
          type: string
          description: Default value for the field

    NumericFieldOptions:
      type: object
      description: Additional options for numeric fields
      properties:
        precision:
          type: integer
          description: Total number of digits (for decimal types)
        scale:
          type: integer
          description: Number of digits to the right of the decimal point (for decimal types)
        min:
          type: number
          description: Minimum value for numeric fields
        max:
          type: number
          description: Maximum value for numeric fields
        defaultValue:
          type: number
          description: Default value for the field

    AssociationDefinition:
      type: object
      description: Relationship information for a field to another object
      properties:
        associationType:
          type: string
          description: High-level association variety (e.g., 'foreignKey', 'lookup', 'ref')
          example: "foreignKey"
        targetObject:
          type: string
          description: Name of the referenced/parent object
          example: "Account"
        targetField:
          type: string
          description: Name of the referenced field on the target object
        cardinality:
          type: string
          description: Association cardinality from the referencing field's perspective
          example: "many-to-one"
        onDelete:
          type: string
          description: Behavior upon foreign object deletion
          example: "setNull"
        required:
          type: boolean
          description: If true, a referenced record must exist
        reverseLookupFieldName:
          type: string
          description: Optional inverse relationship/property name exposed on the target object
        labels:
          $ref: '#/components/schemas/AssociationLabels'
      required:
        - associationType
        - targetObject

    AssociationLabels:
      type: object
      description: UI labels for an association
      properties:
        singular:
          type: string
          description: Singular display label
        plural:
          type: string
          description: Plural display label

    FieldUpsertResult:
      type: object
      description: Result of an upsert operation for a single field
      properties:
        fieldName:
          type: string
          description: Name of the field
        action:
          type: string
          description: Action taken (create, update, none)
        metadata:
          type: object
          description: Provider-specific metadata about the field
          additionalProperties: true
        warnings:
          type: array
          description: Warnings that occurred during the upsert operation
          items:
            type: string
      required:
        - fieldName
        - action

    ClaimedDomainResponse:
      type: object
      required:
        - id
        - parentType
        - parentId
        - domain
      properties:
        id:
          type: string
          description: Unique identifier for the claimed domain
          example: 00000000-0000-0000-0000-000000000001
        parentType:
          type: string
          description: Type of the parent entity that claimed the domain
          example: org
        parentId:
          type: string
          description: ID of the parent entity that claimed the domain
          example: 00000000-0000-0000-0000-000000000001
        domain:
          type: string
          description: The normalized domain name
          example: xyz.com
    NotificationTarget:
      title: Notification Target
      required:
        - id
        - label
        - type
        - metadata
        - createTime
      type: object
      properties:
        id:
          type: string
          description: The notification target ID.
        label:
          type: string
          description: A human-readable label for the notification target.
          example: "Production Slack Alerts"
        type:
          type: string
          description: The type of notification target.
          enum: ["webhook"]
          example: webhook
        metadata:
          type: object
          required:
            - url
          properties:
            url:
              type: string
              description: Webhook URL, must start with "https://".
              example: https://webhooks.mailmonkey.com/salesforce-lead-converted
            headers:
              $ref: "#/components/schemas/WebhookHeaders"
        secrets:
          type: object
          description: Secrets for the target.
        createTime:
          type: string
          format: date-time
          description: The time when the notification target was created.
        updateTime:
          type: string
          format: date-time
          description: The time when the notification target was last updated.
    NotificationTopic:
      title: Notification Topic
      required:
        - id
        - label
        - projectId
        - createTime
      type: object
      properties:
        id:
          type: string
          description: The notification topic ID.
        label:
          type: string
          description: A human-readable label for the notification topic.
          example: "System Alerts"
        projectId:
          type: string
          description: The Ampersand project ID.
        createTime:
          type: string
          format: date-time
          description: The time when the notification topic was created.
        updateTime:
          type: string
          format: date-time
          description: The time when the notification topic was last updated.
    NotificationEventTopicRoute:
      title: Notification Event Topic Route
      required:
        - id
        - eventType
        - topicId
        - projectId
        - createTime
      type: object
      properties:
        id:
          type: string
          description: The event-topic route ID.
        eventType:
          type: string
          description: The type of notification event.
          enum: 
            - "read.backfill.done"
            - "connection.created"
            - "installation.created"
            - "installation.updated"
            - "installation.deleted"
            - "read.schedule.paused"
          example: "installation.created"
        topicId:
          type: string
          description: The ID of the notification topic to route events to.
        projectId:
          type: string
          description: The Ampersand project ID.
        createTime:
          type: string
          format: date-time
          description: The time when the event-topic route was created.
        updateTime:
          type: string
          format: date-time
          description: The time when the event-topic route was last updated.
    NotificationTopicTargetRoute:
      title: Notification Topic Target Route
      required:
        - id
        - topicId
        - targetId
        - projectId
        - createTime
      type: object
      properties:
        id:
          type: string
          description: The topic-target route ID.
        topicId:
          type: string
          description: The ID of the notification topic.
        targetId:
          type: string
          description: The ID of the notification target.
        projectId:
          type: string
          description: The Ampersand project ID.
        createTime:
          type: string
          format: date-time
          description: The time when the topic-target route was created.

  securitySchemes:
    APIKeyHeader:
      type: apiKey
      name: X-Api-Key
      in: header
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - APIKeyHeader: []
  - Bearer: []
