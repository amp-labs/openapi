# See Makefile for the commands that generate Go types from this file.
# This file is referenced by api.yaml.
openapi: 3.0.1
info:
  title: Config types
  version: 1.0.0
  license:
    name: MIT License
    url: https://opensource.org/license/mit
servers: []
paths: {}

components:
  schemas:
    BaseConfigContent:
      type: object
      properties:
        provider:
          description: The SaaS API that we are integrating with.
          example: salesforce
          type: string
        read:
          $ref: '#/components/schemas/BaseReadConfig'
        write:
          $ref: '#/components/schemas/BaseWriteConfig'
        proxy:
          $ref: '#/components/schemas/BaseProxyConfig'

    BaseProxyConfig:
      type: object
      properties:
        enabled:
          type: boolean

    BaseReadConfig:
      type: object
      properties:
        objects:
          type: object
          description: This is a map of object names to their configuration.
          additionalProperties:
            $ref: '#/components/schemas/BaseReadConfigObject'

    BaseReadConfigObject:
      type: object
      properties:
        objectName:
          description: The name of the object to read from.
          example: account
          type: string
          x-oapi-codegen-extra-tags:
            validate: required
        schedule:
          type: string
          description: The schedule for reading the object, in cron syntax.
          example: '*/15 * * * *'
        destination:
          description: The name of the destination that the result should be sent to.
          example: accountWebhook
          type: string
        selectedFields:
          type: object
          description:
            This is a map of field names to booleans indicating whether they should be read.
            If a field is already included in `selectedFieldMappings`, it does not need to be included here.
          example: '{ phone: true, fax: true }'
          additionalProperties:
            type: boolean
        selectedFieldMappings:
          type: object
          description: This is a map of mapToNames to field names. (A mapTo name is the name the builder wants to map a field to when it lands in their destination.)
          example: '{ phoneNumber: phone, faxNumber: fax }'
          additionalProperties:
            type: string
        selectedValueMappings:
          type: object
          description: A container for read and write value mappings.
          properties:
            read:
              type: object
              description: This is a map of field names to their value mappings (applied during reads).
              additionalProperties:
                $ref: '#/components/schemas/ValueMappings'
            write:
              type: object
              description: This is a map of field names to their value mappings (applied during writes).
              additionalProperties:
                $ref: '#/components/schemas/ValueMappings'
        selectedFieldsAuto:
          $ref: '#/components/schemas/SelectedFieldsAutoConfig'
        backfill: 
          $ref: '#/components/schemas/BackfillConfig'
    BaseWriteConfig:
      type: object
      properties:
        objects:
          type: object
          description: This is a map of object names to their configuration.
          additionalProperties:
            $ref: '#/components/schemas/BaseWriteConfigObject'

    BaseWriteConfigObject:
      type: object
      properties:
        objectName:
          description: The name of the object to write to.
          example: account
          type: string
          x-oapi-codegen-extra-tags:
            validate: required

    ConfigContent:
      allOf:
        - $ref: '#/components/schemas/BaseConfigContent'
        - type: object
          required:
            - provider
          properties:
            read:
              x-go-type: ReadConfig
            write:
              x-go-type: WriteConfig

    ReadConfig:
      allOf:
        - $ref: '#/components/schemas/BaseReadConfig'
        - type: object
          required:
            - objects
          properties:
            objects:
              additionalProperties:
                x-go-type: ReadConfigObject

    ReadConfigObject:
      allOf:
        - $ref: '#/components/schemas/BaseReadConfigObject'
        - type: object
          required:
            - objectName
            - schedule
            - destination
            - selectedFields
            - selectedFieldMappings

    WriteConfig:
      allOf:
        - $ref: '#/components/schemas/BaseWriteConfig'
        - type: object
          properties:
            objects:
              additionalProperties:
                x-go-type: WriteConfigObject

    WriteConfigObject:
      allOf:
        - $ref: '#/components/schemas/BaseWriteConfigObject'
        - type: object
          required:
            - objectName

    UpdateInstallationConfigContent:
      allOf:
        - $ref: '#/components/schemas/BaseConfigContent'

    UpdateInstallationReadConfig:
      allOf:
        - $ref: '#/components/schemas/BaseReadConfig'

    UpdateInstallationReadConfigObject:
      allOf:
        - $ref: '#/components/schemas/BaseReadConfigObject'

    SelectedFieldsAutoConfig:
      description: If selectedFieldsAuto is set to all, all fields will be read.
      type: string
      enum: [ all ]
      x-enum-varnames:
        - SelectedFieldsAll

    BackfillConfig:
      type: object
      required:
        - defaultPeriod
      properties:
        defaultPeriod:
          $ref: '#/components/schemas/DefaultPeriodConfig'

    DefaultPeriodConfig:
      type: object
      properties:
        days:
          type: integer
          description: Number of days in past to backfill from. 0 is no backfill. e.g) if 10, then backfill last 10 days of data. Required if fullHistory is not set.
          minimum: 0
          example: 30
          x-oapi-codegen-extra-tags:
            validate: required_without=FullHistory,omitempty,min=0
        fullHistory:
          type: boolean
          description: If true, backfill all history. Required if days is not set.
          example: false
          x-oapi-codegen-extra-tags:
            validate: required_without=Days

    ValueMappings:
      description: A collection of value mappings. The mappings will be considered in order, and the first one that matches will be used. If the end is reached and none match, the original value will be used as-is.
      type: array
      items:
        $ref: '#/components/schemas/SingleValueMapping'

    SingleValueMapping:
      type: object
      description: A single value mapping. Eventually, this will be expanded to include more complex mappings.
      discriminator:
        propertyName: type
        mapping:
          stringReplacement: '#/components/schemas/StringReplacementMapping'
          stringDefault: '#/components/schemas/StringDefaultMapping'
          delete: '#/components/schemas/DeleteMapping'
      oneOf:
        - $ref: '#/components/schemas/StringReplacementMapping'
        - $ref: '#/components/schemas/StringDefaultMapping'
        - $ref: '#/components/schemas/DeleteMapping'

    DeleteMapping:
      description: A mapping which will delete the field itself. Use this if you want to remove a field from the output rather than just set a null value. Most likely you'll want to specify this last in the list of mappings.
      type: object
      required:
        - type
      properties:
        type:
          type: string
          description: The type of mapping. Used by SingleValueMapping to determine which schema to use.
          enum:
            - 'delete'
          example: delete

    StringDefaultMapping:
      description: A mapping which will blindly set a string value. The old value is totally ignored. If you're planning on using this, place it last in the list of mappings.
      type: object
      required:
        - type
        - defaultValue
      properties:
        type:
          type: string
          description: The type of mapping. Used by SingleValueMapping to determine which schema to use.
          enum:
            - 'stringDefault'
          example: stringDefault
        defaultValue:
          type: string
          nullable: true
          description: A value to set.

    StringReplacementMapping:
      description: A mapping which looks for a string literal, and replaces it with another string literal.
      type: object
      required:
        - fromValue
        - toValue
        - type
      properties:
        type:
          type: string
          description: The type of mapping. Used by SingleValueMapping to determine which schema to use.
          enum:
            - 'stringReplacement'
          example: stringReplacement
        caseSensitive:
          type: boolean
          nullable: true
          description: Whether the 'from' value is matched as case sensitive (default is true).
        fromValue:
          type: string
          nullable: true
          description: The starting value (may be null, which will match null values).
        toValue:
          type: string
          nullable: true
          description: The ending value (may be null, which will substitute a literal null).
