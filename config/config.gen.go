// Package config provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package config

// BaseConfigContent defines model for BaseConfigContent.
type BaseConfigContent struct {
	// Provider The SaaS API that we are integrating with.
	Provider *string          `json:"provider,omitempty"`
	Proxy    *BaseProxyConfig `json:"proxy,omitempty"`
	Read     *BaseReadConfig  `json:"read,omitempty"`
	Write    *BaseWriteConfig `json:"write,omitempty"`
}

// BaseProxyConfig defines model for BaseProxyConfig.
type BaseProxyConfig struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// BaseReadConfig defines model for BaseReadConfig.
type BaseReadConfig struct {
	// Objects This is a map of object names to their configuration.
	Objects *map[string]BaseReadConfigObject `json:"objects,omitempty"`
}

// BaseReadConfigObject defines model for BaseReadConfigObject.
type BaseReadConfigObject struct {
	// Destination The name of the destination that the result should be sent to.
	Destination *string `json:"destination,omitempty"`

	// History The history configuration for the object.
	History *string `json:"history,omitempty"`

	// ObjectName The name of the object to read from.
	ObjectName *string `json:"objectName,omitempty" validate:"required"`

	// Schedule The schedule for reading the object, in cron syntax.
	Schedule *string `json:"schedule,omitempty"`

	// SelectedFieldMappings This is a map of mapToNames to field names. (A mapTo name is the name the builder wants to map a field to when it lands in their destination.)
	SelectedFieldMappings *map[string]string `json:"selectedFieldMappings,omitempty"`

	// SelectedFields This is a map of field names to booleans indicating whether they should be read.
	SelectedFields *map[string]bool `json:"selectedFields,omitempty"`
}

// BaseWriteConfig defines model for BaseWriteConfig.
type BaseWriteConfig struct {
	// Objects This is a map of object names to their configuration.
	Objects *map[string]BaseWriteConfigObject `json:"objects,omitempty"`
}

// BaseWriteConfigObject defines model for BaseWriteConfigObject.
type BaseWriteConfigObject struct {
	// ObjectName The name of the object to write to.
	ObjectName *string `json:"objectName,omitempty" validate:"required"`
}

// ConfigContent defines model for ConfigContent.
type ConfigContent struct {
	// Provider The SaaS API that we are integrating with.
	Provider string           `json:"provider"`
	Proxy    *BaseProxyConfig `json:"proxy,omitempty"`
	Read     *ReadConfig      `json:"read,omitempty"`
	Write    *WriteConfig     `json:"write,omitempty"`
}

// ReadConfig defines model for ReadConfig.
type ReadConfig struct {
	Objects map[string]ReadConfigObject `json:"objects"`
}

// ReadConfigObject defines model for ReadConfigObject.
type ReadConfigObject struct {
	// Destination The name of the destination that the result should be sent to.
	Destination string `json:"destination"`

	// History The history configuration for the object.
	History *string `json:"history,omitempty"`

	// ObjectName The name of the object to read from.
	ObjectName string `json:"objectName" validate:"required"`

	// Schedule The schedule for reading the object, in cron syntax.
	Schedule string `json:"schedule"`

	// SelectedFieldMappings This is a map of mapToNames to field names. (A mapTo name is the name the builder wants to map a field to when it lands in their destination.)
	SelectedFieldMappings map[string]string `json:"selectedFieldMappings"`

	// SelectedFields This is a map of field names to booleans indicating whether they should be read.
	SelectedFields map[string]bool `json:"selectedFields"`
}

// UpdateInstallationConfigContent defines model for UpdateInstallationConfigContent.
type UpdateInstallationConfigContent = BaseConfigContent

// UpdateInstallationReadConfig defines model for UpdateInstallationReadConfig.
type UpdateInstallationReadConfig = BaseReadConfig

// UpdateInstallationReadConfigObject defines model for UpdateInstallationReadConfigObject.
type UpdateInstallationReadConfigObject = BaseReadConfigObject

// WriteConfig defines model for WriteConfig.
type WriteConfig struct {
	Objects *map[string]WriteConfigObject `json:"objects,omitempty"`
}

// WriteConfigObject defines model for WriteConfigObject.
type WriteConfigObject struct {
	// ObjectName The name of the object to write to.
	ObjectName string `json:"objectName" validate:"required"`
}
