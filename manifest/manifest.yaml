# See Makefile for the commands that generate Go types from this file.
# This file is referenced by api.yaml.
openapi: 3.0.1
info:
  title: Integration manifest
  version: 1.0.0
  license:
    name: MIT License
    url: https://opensource.org/license/mit
servers: []
paths: {}

components:
  schemas:
    Manifest:
      title: Integration Manifest
      type: object
      description: This is the schema of the manifest file that is used to define the integrations of the project.
      required:
        - specVersion
        - integrations
      properties:
        specVersion:
          type: string
          description: The version of the manifest spec that this file conforms to.
        integrations:
          type: array
          items:
            $ref: '#/components/schemas/Integration'

    Integration:
      title: Integration
      type: object
      required:
        - name
        - provider
      properties:
        name:
          type: string
        displayName:
          type: string
        provider:
          type: string
        read:
          $ref: '#/components/schemas/IntegrationRead'
        write:
          $ref: '#/components/schemas/IntegrationWrite'
        proxy:
          $ref: '#/components/schemas/IntegrationProxy'
        subscribe:
          $ref: '#/components/schemas/IntegrationSubscribe'

    IntegrationProxy:
      title: Proxy Integration
      type: object
      properties:
        enabled:
          type: boolean

    IntegrationRead:
      title: Read Integration
      type: object
      properties:
        objects:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationObject'

    IntegrationWrite:
      title: Write Integration
      type: object
      properties:
        objects:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationWriteObject'
    
    IntegrationSubscribe:
      title: Subscribe Integration
      type: object
      properties:
        objects:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationSubscribeObject'

    # This is currently only used for read actions.
    # Once we figure out whether to share the same type for both read and write, or use
    # different types, we can rename this to IntegrationReadObject if appropriate.
    IntegrationObject:
      title: Integration Object
      type: object
      required:
        - objectName
        - destination
        - schedule
      properties:
        objectName:
          type: string
        destination:
          type: string
        schedule:
          type: string
        mapToName:
          type: string
          description: An object name to map to.
          example: people
          x-go-type-skip-optional-pointer: true
        mapToDisplayName:
          type: string
          description: A display name to map to.
          example: People
          x-go-type-skip-optional-pointer: true
        requiredFields:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationField'
        optionalFields:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationField'
        optionalFieldsAuto:
          $ref: '#/components/schemas/OptionalFieldsAutoOption'
        backfill:
          $ref: '#/components/schemas/Backfill'
        delivery:
          $ref: '#/components/schemas/Delivery'

    # We might end up using the same IntegrationObject type for both read and write,
    # but for now we're introducing a new type to keep them separate, and not renaming the
    # existing IntegrationObject.
    IntegrationWriteObject:
      title: Integration Write Object
      type: object
      required:
        - objectName
      properties:
        objectName:
          type: string
        inheritMapping:
          type: boolean
          description: If true, the write object will inherit the mapping from the read object. If false, the write object will have no mapping.
          example: true
        valueDefaults:
          $ref: '#/components/schemas/ValueDefaults'
    
    IntegrationSubscribeObject:
      title: Integration Subscribe Object
      type: object
      required:
        - objectName
        - destination
      properties: 
        objectName:
          type: string
        destination:
          type: string
        CreateEvent:
          $ref: '#/components/schemas/CreateEvent'
        UpdateEvent:
          $ref: '#/components/schemas/UpdateEvent'
        DeleteEvent:
          $ref: '#/components/schemas/DeleteEvent'
        AssociationChangeEvent:
          $ref: '#/components/schemas/AssociationChangeEvent'
        OtherEvents:
          $ref: '#/components/schemas/OtherEvents'

    CreateEvent: 
      type : object
      properties: 
        enabled:
          type: boolean
          description: If true, the integration will subscribe to create events.
      
    UpdateEvent:
      type: object
      properties:
        enabled:
          type: boolean
          description: If true, the integration will subscribe to update events.
        requiredWatchFields:
          type: array
          items:
            type: string
            description: The fields that are required to be watched for updates. 
            example: 
              - name
              - domain
    
    DeleteEvent:
      type: object
      properties:
        enabled:
          type: boolean
          description: If true, the integration will subscribe to delete events.

    AssociationChangeEvent:
      type: object
      properties:
        enabled:
          type: boolean
          description: If true, the integration will subscribe to association change events.
        includeFullRecords:
          type: boolean
          description: If true, the integration will include full records in the event payload.
    
    OtherEvents:
      type: array
      items:
        type: string
        description: Non-standard events that the integration will subscribe to.
        example: 
          - object.merged 
          - object.restored

    HydratedIntegration:
      title: Hydrated Integration
      type: object
      required:
        - name
        - provider
      properties:
        name:
          type: string
        displayName:
          type: string
        provider:
          type: string
        read:
          $ref: '#/components/schemas/HydratedIntegrationRead'
        write:
          $ref: '#/components/schemas/HydratedIntegrationWrite'
        proxy:
          $ref: '#/components/schemas/HydratedIntegrationProxy'

    HydratedIntegrationProxy:
      title: Hydrated Proxy Integration
      type: object
      properties:
        enabled:
          type: boolean

    HydratedIntegrationRead:
      title: Hydrated Read Integration
      type: object
      properties:
        objects:
          type: array
          items:
            $ref: '#/components/schemas/HydratedIntegrationObject'

    HydratedIntegrationWrite:
      type: object
      properties:
        objects:
          type: array
          items:
            $ref: '#/components/schemas/HydratedIntegrationWriteObject'

    # This is currently only used for read actions.
    # Once we figure out whether to share the same type for both read and write, or use
    # different types, we can rename this to HydratedIntegrationReadObject if appropriate.
    HydratedIntegrationObject:
      title: Hydrated Integration Object
      type: object
      required:
        - objectName
        - displayName
        - destination
        - schedule
      properties:
        objectName:
          type: string
        displayName:
          type: string
        mapToName:
          type: string
          description: An object name to map to.
          example: people
          x-go-type-skip-optional-pointer: true
        mapToDisplayName:
          type: string
          description: A display name to map to.
          example: People
          x-go-type-skip-optional-pointer: true
        destination:
          type: string
        schedule:
          type: string
        requiredFields:
          type: array
          items:
            $ref: '#/components/schemas/HydratedIntegrationField'
        optionalFields:
          type: array
          items:
            $ref: '#/components/schemas/HydratedIntegrationField'
        optionalFieldsAuto:
          $ref: '#/components/schemas/OptionalFieldsAutoOption'
        allFields:
          description: This is a list of all fields on the object for a particular SaaS instance, including their display names.
          type: array
          items:
            $ref: '#/components/schemas/HydratedIntegrationField'
        allFieldsMetadata:
          description: This is a map of all fields on the object including their metadata (such as display name and type), the keys of the map are the field names.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/FieldMetadata'
        backfill:
          $ref: '#/components/schemas/Backfill'

    # We might end up using the same HydratedIntegrationObject type for both read and write,
    # but for now we're introducing a new type to keep them separate, and not renaming the
    # existing IntegrationObject.
    HydratedIntegrationWriteObject:
      type: object
      required:
        - objectName
        - displayName
      properties:
        objectName:
          type: string
        displayName:
          type: string
        valueDefaults:
          $ref: '#/components/schemas/ValueDefaults'

    OptionalFieldsAutoOption:
      title: Optional Fields Auto Option
      type: string
      enum: [all]

    IntegrationField:
      title: Integration Field
      oneOf:
        - $ref: '#/components/schemas/IntegrationFieldExistent'
        - $ref: '#/components/schemas/IntegrationFieldMapping'

    IntegrationFieldExistent:
      title: Integration Field Existent
      type: object
      required:
        - fieldName
      properties:
        fieldName:
          type: string
        mapToName:
          type: string
          description: The field name to map to.
          example: account_id
          x-go-type-skip-optional-pointer: true
        mapToDisplayName:
          type: string
          description: The display name to map to.
          example: Account ID
          x-go-type-skip-optional-pointer: true

    IntegrationFieldMapping:
      title: Integration Field Mapping
      type: object
      required:
        - mapToName
      properties:
        mapToName:
          type: string
        mapToDisplayName:
          type: string
        default:
          type: string
        prompt:
          type: string

    HydratedIntegrationField:
      title: Hydrated Integration Field
      oneOf:
        - $ref: '#/components/schemas/HydratedIntegrationFieldExistent'
        - $ref: '#/components/schemas/IntegrationFieldMapping'

    FieldMetadata:
      title: Field Metadata
      type: object
      required:
        - fieldName
        - displayName
      properties:
        fieldName:
          type: string
          description: The name of the field from the provider API.
          example: Account ID
        displayName:
          type: string
          description: The display name of the field from the provider API.
          example: Account ID
        valueType:
          type: string
          description: A normalized field type
          enum:
            - string
            - boolean
            - singleSelect
            - multiSelect
            - date
            - datetime
            - int
            - float
            - other
          x-go-type-skip-optional-pointer: true
        providerType:
          type: string
          description: Raw field type from the provider API.
          example: "timestamp"
          x-go-type-skip-optional-pointer: true
        readOnly:
          type: boolean
          description: Whether the field is read-only.
          example: false
          x-go-type-skip-optional-pointer: true
        values:
          type: array
          description: If the valueType is singleSelect or multiSelect, this is a list of possible values
          x-go-type-skip-optional-pointer: true
          items:
            $ref: '#/components/schemas/FieldValue'

    FieldValue:
      title: Field Value
      type: object
      required:
        - value
        - displayValue
      description: Represents a field value
      properties:
        value:
          type: string
          description: The internal value used by the system
          example: "outbound"
        displayValue:
          type: string
          description: The human-readable display value
          example: "Outbound Campaign"

    HydratedIntegrationFieldExistent:
      type: object
      required:
        - fieldName
        - displayName
      properties:
        fieldName:
          type: string
        displayName:
          type: string
        mapToName:
          type: string
          description: The field name to map to in the destination.
          example: account_id
          x-go-type-skip-optional-pointer: true
        mapToDisplayName:
          type: string
          description: The display name to map to in the destination.
          example: Account ID
          x-go-type-skip-optional-pointer: true

    Backfill:
      title: Backfill
      type: object
      required:
        - defaultPeriod
      properties:
        defaultPeriod:
          $ref: '#/components/schemas/DefaultPeriod'

    DefaultPeriod:
      title: Default Period
      type: object
      properties:
        days:
          type: integer
          description: Number of days in past to backfill from. 0 is no backfill. e.g) if 10, then backfill last 10 days of data. Required if fullHistory is not set.
          minimum: 0
          example: 30
          x-oapi-codegen-extra-tags:
            validate: required_without=FullHistory,omitempty,min=0
        fullHistory:
          type: boolean
          description: If true, backfill all history. Required if days is not set.
          example: false
          x-oapi-codegen-extra-tags:
            validate: required_without=Days

    Delivery:
      title: Delivery
      type: object
      properties:
        mode:
          type: string
          default: auto
          enum: [onRequest, auto]
          description: The data delivery mode for this object. If not specified, defaults to automatic.
        pageSize:
            type: integer
            description: The number of records to receive per data delivery.
            minimum: 50
            maximum: 500

    ValueDefaults:
      title: Value Defaults
      type: object
      description: Configuration to set default write values for object fields.
      properties:
        allowAnyFields:
          type: boolean
          description: If true, users can set default values for any field.
          example: true
